
17_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001340  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014e0  080014e0  000114e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001528  08001528  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001528  08001528  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001528  08001528  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001528  08001528  00011528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800152c  0800152c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  0800158c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800158c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001618  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006c2  00000000  00000000  000216e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00021db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000128  00000000  00000000  00021f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000faf2  00000000  00000000  00022088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002021  00000000  00000000  00031b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005583e  00000000  00000000  00033b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000cc4  00000000  00000000  000893dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0008a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014c8 	.word	0x080014c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014c8 	.word	0x080014c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <pa1_adc_interrupt_init>:




void pa1_adc_interrupt_init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	/***Configure the GPIO Pin***/
	/*Enable clock access to GPIO port*/
	RCC->AHB1ENR |= GPIOAEN;
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <pa1_adc_interrupt_init+0x64>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a16      	ldr	r2, [pc, #88]	; (8000320 <pa1_adc_interrupt_init+0x64>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set the mode of PA1 to analog*/
	GPIOA->MODER |= (1U<<2);
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <pa1_adc_interrupt_init+0x68>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <pa1_adc_interrupt_init+0x68>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <pa1_adc_interrupt_init+0x68>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a11      	ldr	r2, [pc, #68]	; (8000324 <pa1_adc_interrupt_init+0x68>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6013      	str	r3, [r2, #0]
	/***Configure the ADC Module***/
	/*Enable clock access to ADC*/
	RCC->APB2ENR |= ADC1EN;
 80002e4:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <pa1_adc_interrupt_init+0x64>)
 80002e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <pa1_adc_interrupt_init+0x64>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ee:	6453      	str	r3, [r2, #68]	; 0x44

	/*Enable end-of-conversion interrupt*/
	ADC1->CR1 |= CR1_EOCIE;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <pa1_adc_interrupt_init+0x6c>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <pa1_adc_interrupt_init+0x6c>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6053      	str	r3, [r2, #4]

	/*Enable ADC Interrupt in NVIC*/
	NVIC_EnableIRQ(ADC_IRQn);
 80002fc:	2012      	movs	r0, #18
 80002fe:	f7ff ffbf 	bl	8000280 <__NVIC_EnableIRQ>

	/*Conversion Sequence start*/
	ADC1->SQR3 = ADC_CH1;
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <pa1_adc_interrupt_init+0x6c>)
 8000304:	2201      	movs	r2, #1
 8000306:	635a      	str	r2, [r3, #52]	; 0x34
	/*Conversion Sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <pa1_adc_interrupt_init+0x6c>)
 800030a:	2200      	movs	r2, #0
 800030c:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Enable ADC Module*/
	ADC1->CR2 |= CR2_ADON;
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <pa1_adc_interrupt_init+0x6c>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4a05      	ldr	r2, [pc, #20]	; (8000328 <pa1_adc_interrupt_init+0x6c>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6093      	str	r3, [r2, #8]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	40012000 	.word	0x40012000

0800032c <start_conversion>:
	/*Enable ADC Module*/
	ADC1->CR2 |= CR2_ADON;
}

void start_conversion(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	/*Enable Continuous Conversion*/
	ADC1->CR2 |= CR2_CONT;
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <start_conversion+0x28>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <start_conversion+0x28>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6093      	str	r3, [r2, #8]
	/*Start Conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <start_conversion+0x28>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <start_conversion+0x28>)
 8000342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000346:	6093      	str	r3, [r2, #8]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40012000 	.word	0x40012000

08000358 <main>:
uint32_t sensor_value;

char key;

int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

	uart2_tx_init();
 800035c:	f000 f8de 	bl	800051c <uart2_tx_init>
	pa1_adc_interrupt_init();
 8000360:	f7ff ffac 	bl	80002bc <pa1_adc_interrupt_init>
	start_conversion();
 8000364:	f7ff ffe2 	bl	800032c <start_conversion>


	while(1)
 8000368:	e7fe      	b.n	8000368 <main+0x10>
	...

0800036c <adc_callback>:

}
}

static void adc_callback(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <adc_callback+0x1c>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000374:	4a05      	ldr	r2, [pc, #20]	; (800038c <adc_callback+0x20>)
 8000376:	6013      	str	r3, [r2, #0]
	printf("Sensor Value : %d\n\r",(int)sensor_value);
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <adc_callback+0x20>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4619      	mov	r1, r3
 800037e:	4804      	ldr	r0, [pc, #16]	; (8000390 <adc_callback+0x24>)
 8000380:	f000 fa30 	bl	80007e4 <iprintf>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40012000 	.word	0x40012000
 800038c:	20000078 	.word	0x20000078
 8000390:	080014e0 	.word	0x080014e0

08000394 <ADC_IRQHandler>:



void ADC_IRQHandler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	/*Check for eoc in SR*/
	if((ADC1->SR & SR_EOC)!=0)
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <ADC_IRQHandler+0x24>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 0302 	and.w	r3, r3, #2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d007      	beq.n	80003b4 <ADC_IRQHandler+0x20>
	{
		/*Clear EOC*/
		ADC1->SR &=~ SR_EOC;
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <ADC_IRQHandler+0x24>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <ADC_IRQHandler+0x24>)
 80003aa:	f023 0302 	bic.w	r3, r3, #2
 80003ae:	6013      	str	r3, [r2, #0]

		/*DO SOMETHING*/
		adc_callback();
 80003b0:	f7ff ffdc 	bl	800036c <adc_callback>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40012000 	.word	0x40012000

080003bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	e00a      	b.n	80003e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003ce:	f3af 8000 	nop.w
 80003d2:	4601      	mov	r1, r0
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	60ba      	str	r2, [r7, #8]
 80003da:	b2ca      	uxtb	r2, r1
 80003dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3301      	adds	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	dbf0      	blt.n	80003ce <_read+0x12>
  }

  return len;
 80003ec:	687b      	ldr	r3, [r7, #4]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b086      	sub	sp, #24
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	60f8      	str	r0, [r7, #12]
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e009      	b.n	800041c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	60ba      	str	r2, [r7, #8]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f877 	bl	8000504 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	3301      	adds	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	429a      	cmp	r2, r3
 8000422:	dbf1      	blt.n	8000408 <_write+0x12>
  }
  return len;
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <_close>:

int _close(int file)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000456:	605a      	str	r2, [r3, #4]
  return 0;
 8000458:	2300      	movs	r3, #0
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <_isatty>:

int _isatty(int file)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a0:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <_sbrk+0x5c>)
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <_sbrk+0x60>)
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <_sbrk+0x64>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <_sbrk+0x68>)
 80004b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d207      	bcs.n	80004d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c8:	f000 f9a6 	bl	8000818 <__errno>
 80004cc:	4603      	mov	r3, r0
 80004ce:	220c      	movs	r2, #12
 80004d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004d6:	e009      	b.n	80004ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <_sbrk+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20020000 	.word	0x20020000
 80004f8:	00000400 	.word	0x00000400
 80004fc:	2000007c 	.word	0x2000007c
 8000500:	200001d0 	.word	0x200001d0

08000504 <__io_putchar>:


void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

	uart2_write(ch);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f851 	bl	80005b4 <uart2_write>
	return(ch);
 8000512:	687b      	ldr	r3, [r7, #4]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <uart2_tx_init>:
			USART2->CR1 |= CR1_UE;

}

void uart2_tx_init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	/****************Configure UART GPIO*********************/
	/*Enable Clock access to GPIOA*/

	RCC->AHB1ENR |= GPIOAEN;
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <uart2_tx_init+0x88>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <uart2_tx_init+0x88>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6313      	str	r3, [r2, #48]	; 0x30

			/*Set PA2 mode to alternate function mode*/

			GPIOA->MODER &=~ (1U<<4);
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <uart2_tx_init+0x8c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <uart2_tx_init+0x8c>)
 8000532:	f023 0310 	bic.w	r3, r3, #16
 8000536:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |= (1U<<5);
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <uart2_tx_init+0x8c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a1a      	ldr	r2, [pc, #104]	; (80005a8 <uart2_tx_init+0x8c>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6013      	str	r3, [r2, #0]

			/*Set PA2 alternate function type to UART_TX*/
			GPIOA->AFR[0] |= (1U<<8);
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <uart2_tx_init+0x8c>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <uart2_tx_init+0x8c>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] |= (1U<<9);
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <uart2_tx_init+0x8c>)
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <uart2_tx_init+0x8c>)
 8000556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055a:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] |= (1U<<10);
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <uart2_tx_init+0x8c>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <uart2_tx_init+0x8c>)
 8000562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000566:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] &= ~(1U<<11);
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <uart2_tx_init+0x8c>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <uart2_tx_init+0x8c>)
 800056e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000572:	6213      	str	r3, [r2, #32]


			/****************Configure uart module ***************/
			/*Enable clock access to uart2 */
			RCC->APB1ENR |= UART2EN;
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <uart2_tx_init+0x88>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <uart2_tx_init+0x88>)
 800057a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40

			/*Configure baudrate*/
			uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000584:	4909      	ldr	r1, [pc, #36]	; (80005ac <uart2_tx_init+0x90>)
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <uart2_tx_init+0x94>)
 8000588:	f000 f82c 	bl	80005e4 <uart_set_baudrate>

			/*Configure the transfer direction*/
			USART2->CR1 =  CR1_TE;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <uart2_tx_init+0x94>)
 800058e:	2208      	movs	r2, #8
 8000590:	60da      	str	r2, [r3, #12]

			/*Enable uart module*/
			USART2->CR1 |= CR1_UE;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <uart2_tx_init+0x94>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <uart2_tx_init+0x94>)
 8000598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800059c:	60d3      	str	r3, [r2, #12]

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000
 80005ac:	00f42400 	.word	0x00f42400
 80005b0:	40004400 	.word	0x40004400

080005b4 <uart2_write>:
	/*Read Data*/
	USART2->DR;
}

void uart2_write(int ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80005bc:	bf00      	nop
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <uart2_write+0x2c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <uart2_write+0xa>
	/*Write transmit data register*/
	USART2->DR = (ch & 0XFF);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <uart2_write+0x2c>)
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	6053      	str	r3, [r2, #4]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40004400 	.word	0x40004400

080005e4 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	68b8      	ldr	r0, [r7, #8]
 80005f4:	f000 f808 	bl	8000608 <compute_uart_bd>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	609a      	str	r2, [r3, #8]
}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	085a      	lsrs	r2, r3, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	441a      	add	r2, r3
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000620:	b29b      	uxth	r3, r3
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
	...

08000630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000632:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000634:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopForever+0x6>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopForever+0xe>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopForever+0x16>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065e:	f000 f8e1 	bl	8000824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fe79 	bl	8000358 <main>

08000666 <LoopForever>:

LoopForever:
  b LoopForever
 8000666:	e7fe      	b.n	8000666 <LoopForever>
  ldr   r0, =_estack
 8000668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000674:	08001530 	.word	0x08001530
  ldr r2, =_sbss
 8000678:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800067c:	200001cc 	.word	0x200001cc

08000680 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <BusFault_Handler>
	...

08000684 <std>:
 8000684:	2300      	movs	r3, #0
 8000686:	b510      	push	{r4, lr}
 8000688:	4604      	mov	r4, r0
 800068a:	e9c0 3300 	strd	r3, r3, [r0]
 800068e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000692:	6083      	str	r3, [r0, #8]
 8000694:	8181      	strh	r1, [r0, #12]
 8000696:	6643      	str	r3, [r0, #100]	; 0x64
 8000698:	81c2      	strh	r2, [r0, #14]
 800069a:	6183      	str	r3, [r0, #24]
 800069c:	4619      	mov	r1, r3
 800069e:	2208      	movs	r2, #8
 80006a0:	305c      	adds	r0, #92	; 0x5c
 80006a2:	f000 f8b1 	bl	8000808 <memset>
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <std+0x38>)
 80006a8:	6263      	str	r3, [r4, #36]	; 0x24
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <std+0x3c>)
 80006ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <std+0x40>)
 80006b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <std+0x44>)
 80006b4:	6224      	str	r4, [r4, #32]
 80006b6:	6323      	str	r3, [r4, #48]	; 0x30
 80006b8:	bd10      	pop	{r4, pc}
 80006ba:	bf00      	nop
 80006bc:	080010cd 	.word	0x080010cd
 80006c0:	080010ef 	.word	0x080010ef
 80006c4:	08001127 	.word	0x08001127
 80006c8:	0800114b 	.word	0x0800114b

080006cc <stdio_exit_handler>:
 80006cc:	4a02      	ldr	r2, [pc, #8]	; (80006d8 <stdio_exit_handler+0xc>)
 80006ce:	4903      	ldr	r1, [pc, #12]	; (80006dc <stdio_exit_handler+0x10>)
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <stdio_exit_handler+0x14>)
 80006d2:	f000 b869 	b.w	80007a8 <_fwalk_sglue>
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000
 80006dc:	08001065 	.word	0x08001065
 80006e0:	2000000c 	.word	0x2000000c

080006e4 <cleanup_stdio>:
 80006e4:	6841      	ldr	r1, [r0, #4]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <cleanup_stdio+0x34>)
 80006e8:	4299      	cmp	r1, r3
 80006ea:	b510      	push	{r4, lr}
 80006ec:	4604      	mov	r4, r0
 80006ee:	d001      	beq.n	80006f4 <cleanup_stdio+0x10>
 80006f0:	f000 fcb8 	bl	8001064 <_fflush_r>
 80006f4:	68a1      	ldr	r1, [r4, #8]
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <cleanup_stdio+0x38>)
 80006f8:	4299      	cmp	r1, r3
 80006fa:	d002      	beq.n	8000702 <cleanup_stdio+0x1e>
 80006fc:	4620      	mov	r0, r4
 80006fe:	f000 fcb1 	bl	8001064 <_fflush_r>
 8000702:	68e1      	ldr	r1, [r4, #12]
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <cleanup_stdio+0x3c>)
 8000706:	4299      	cmp	r1, r3
 8000708:	d004      	beq.n	8000714 <cleanup_stdio+0x30>
 800070a:	4620      	mov	r0, r4
 800070c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000710:	f000 bca8 	b.w	8001064 <_fflush_r>
 8000714:	bd10      	pop	{r4, pc}
 8000716:	bf00      	nop
 8000718:	20000080 	.word	0x20000080
 800071c:	200000e8 	.word	0x200000e8
 8000720:	20000150 	.word	0x20000150

08000724 <global_stdio_init.part.0>:
 8000724:	b510      	push	{r4, lr}
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <global_stdio_init.part.0+0x30>)
 8000728:	4c0b      	ldr	r4, [pc, #44]	; (8000758 <global_stdio_init.part.0+0x34>)
 800072a:	4a0c      	ldr	r2, [pc, #48]	; (800075c <global_stdio_init.part.0+0x38>)
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	4620      	mov	r0, r4
 8000730:	2200      	movs	r2, #0
 8000732:	2104      	movs	r1, #4
 8000734:	f7ff ffa6 	bl	8000684 <std>
 8000738:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800073c:	2201      	movs	r2, #1
 800073e:	2109      	movs	r1, #9
 8000740:	f7ff ffa0 	bl	8000684 <std>
 8000744:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000748:	2202      	movs	r2, #2
 800074a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074e:	2112      	movs	r1, #18
 8000750:	f7ff bf98 	b.w	8000684 <std>
 8000754:	200001b8 	.word	0x200001b8
 8000758:	20000080 	.word	0x20000080
 800075c:	080006cd 	.word	0x080006cd

08000760 <__sfp_lock_acquire>:
 8000760:	4801      	ldr	r0, [pc, #4]	; (8000768 <__sfp_lock_acquire+0x8>)
 8000762:	f000 b883 	b.w	800086c <__retarget_lock_acquire_recursive>
 8000766:	bf00      	nop
 8000768:	200001bd 	.word	0x200001bd

0800076c <__sfp_lock_release>:
 800076c:	4801      	ldr	r0, [pc, #4]	; (8000774 <__sfp_lock_release+0x8>)
 800076e:	f000 b87e 	b.w	800086e <__retarget_lock_release_recursive>
 8000772:	bf00      	nop
 8000774:	200001bd 	.word	0x200001bd

08000778 <__sinit>:
 8000778:	b510      	push	{r4, lr}
 800077a:	4604      	mov	r4, r0
 800077c:	f7ff fff0 	bl	8000760 <__sfp_lock_acquire>
 8000780:	6a23      	ldr	r3, [r4, #32]
 8000782:	b11b      	cbz	r3, 800078c <__sinit+0x14>
 8000784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000788:	f7ff bff0 	b.w	800076c <__sfp_lock_release>
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__sinit+0x28>)
 800078e:	6223      	str	r3, [r4, #32]
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <__sinit+0x2c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f5      	bne.n	8000784 <__sinit+0xc>
 8000798:	f7ff ffc4 	bl	8000724 <global_stdio_init.part.0>
 800079c:	e7f2      	b.n	8000784 <__sinit+0xc>
 800079e:	bf00      	nop
 80007a0:	080006e5 	.word	0x080006e5
 80007a4:	200001b8 	.word	0x200001b8

080007a8 <_fwalk_sglue>:
 80007a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007ac:	4607      	mov	r7, r0
 80007ae:	4688      	mov	r8, r1
 80007b0:	4614      	mov	r4, r2
 80007b2:	2600      	movs	r6, #0
 80007b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007b8:	f1b9 0901 	subs.w	r9, r9, #1
 80007bc:	d505      	bpl.n	80007ca <_fwalk_sglue+0x22>
 80007be:	6824      	ldr	r4, [r4, #0]
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d1f7      	bne.n	80007b4 <_fwalk_sglue+0xc>
 80007c4:	4630      	mov	r0, r6
 80007c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007ca:	89ab      	ldrh	r3, [r5, #12]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d907      	bls.n	80007e0 <_fwalk_sglue+0x38>
 80007d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007d4:	3301      	adds	r3, #1
 80007d6:	d003      	beq.n	80007e0 <_fwalk_sglue+0x38>
 80007d8:	4629      	mov	r1, r5
 80007da:	4638      	mov	r0, r7
 80007dc:	47c0      	blx	r8
 80007de:	4306      	orrs	r6, r0
 80007e0:	3568      	adds	r5, #104	; 0x68
 80007e2:	e7e9      	b.n	80007b8 <_fwalk_sglue+0x10>

080007e4 <iprintf>:
 80007e4:	b40f      	push	{r0, r1, r2, r3}
 80007e6:	b507      	push	{r0, r1, r2, lr}
 80007e8:	4906      	ldr	r1, [pc, #24]	; (8000804 <iprintf+0x20>)
 80007ea:	ab04      	add	r3, sp, #16
 80007ec:	6808      	ldr	r0, [r1, #0]
 80007ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80007f2:	6881      	ldr	r1, [r0, #8]
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	f000 f865 	bl	80008c4 <_vfiprintf_r>
 80007fa:	b003      	add	sp, #12
 80007fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr
 8000804:	20000058 	.word	0x20000058

08000808 <memset>:
 8000808:	4402      	add	r2, r0
 800080a:	4603      	mov	r3, r0
 800080c:	4293      	cmp	r3, r2
 800080e:	d100      	bne.n	8000812 <memset+0xa>
 8000810:	4770      	bx	lr
 8000812:	f803 1b01 	strb.w	r1, [r3], #1
 8000816:	e7f9      	b.n	800080c <memset+0x4>

08000818 <__errno>:
 8000818:	4b01      	ldr	r3, [pc, #4]	; (8000820 <__errno+0x8>)
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000058 	.word	0x20000058

08000824 <__libc_init_array>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	4d0d      	ldr	r5, [pc, #52]	; (800085c <__libc_init_array+0x38>)
 8000828:	4c0d      	ldr	r4, [pc, #52]	; (8000860 <__libc_init_array+0x3c>)
 800082a:	1b64      	subs	r4, r4, r5
 800082c:	10a4      	asrs	r4, r4, #2
 800082e:	2600      	movs	r6, #0
 8000830:	42a6      	cmp	r6, r4
 8000832:	d109      	bne.n	8000848 <__libc_init_array+0x24>
 8000834:	4d0b      	ldr	r5, [pc, #44]	; (8000864 <__libc_init_array+0x40>)
 8000836:	4c0c      	ldr	r4, [pc, #48]	; (8000868 <__libc_init_array+0x44>)
 8000838:	f000 fe46 	bl	80014c8 <_init>
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	10a4      	asrs	r4, r4, #2
 8000840:	2600      	movs	r6, #0
 8000842:	42a6      	cmp	r6, r4
 8000844:	d105      	bne.n	8000852 <__libc_init_array+0x2e>
 8000846:	bd70      	pop	{r4, r5, r6, pc}
 8000848:	f855 3b04 	ldr.w	r3, [r5], #4
 800084c:	4798      	blx	r3
 800084e:	3601      	adds	r6, #1
 8000850:	e7ee      	b.n	8000830 <__libc_init_array+0xc>
 8000852:	f855 3b04 	ldr.w	r3, [r5], #4
 8000856:	4798      	blx	r3
 8000858:	3601      	adds	r6, #1
 800085a:	e7f2      	b.n	8000842 <__libc_init_array+0x1e>
 800085c:	08001528 	.word	0x08001528
 8000860:	08001528 	.word	0x08001528
 8000864:	08001528 	.word	0x08001528
 8000868:	0800152c 	.word	0x0800152c

0800086c <__retarget_lock_acquire_recursive>:
 800086c:	4770      	bx	lr

0800086e <__retarget_lock_release_recursive>:
 800086e:	4770      	bx	lr

08000870 <__sfputc_r>:
 8000870:	6893      	ldr	r3, [r2, #8]
 8000872:	3b01      	subs	r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	b410      	push	{r4}
 8000878:	6093      	str	r3, [r2, #8]
 800087a:	da08      	bge.n	800088e <__sfputc_r+0x1e>
 800087c:	6994      	ldr	r4, [r2, #24]
 800087e:	42a3      	cmp	r3, r4
 8000880:	db01      	blt.n	8000886 <__sfputc_r+0x16>
 8000882:	290a      	cmp	r1, #10
 8000884:	d103      	bne.n	800088e <__sfputc_r+0x1e>
 8000886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800088a:	f000 bc62 	b.w	8001152 <__swbuf_r>
 800088e:	6813      	ldr	r3, [r2, #0]
 8000890:	1c58      	adds	r0, r3, #1
 8000892:	6010      	str	r0, [r2, #0]
 8000894:	7019      	strb	r1, [r3, #0]
 8000896:	4608      	mov	r0, r1
 8000898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800089c:	4770      	bx	lr

0800089e <__sfputs_r>:
 800089e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a0:	4606      	mov	r6, r0
 80008a2:	460f      	mov	r7, r1
 80008a4:	4614      	mov	r4, r2
 80008a6:	18d5      	adds	r5, r2, r3
 80008a8:	42ac      	cmp	r4, r5
 80008aa:	d101      	bne.n	80008b0 <__sfputs_r+0x12>
 80008ac:	2000      	movs	r0, #0
 80008ae:	e007      	b.n	80008c0 <__sfputs_r+0x22>
 80008b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008b4:	463a      	mov	r2, r7
 80008b6:	4630      	mov	r0, r6
 80008b8:	f7ff ffda 	bl	8000870 <__sfputc_r>
 80008bc:	1c43      	adds	r3, r0, #1
 80008be:	d1f3      	bne.n	80008a8 <__sfputs_r+0xa>
 80008c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080008c4 <_vfiprintf_r>:
 80008c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008c8:	460d      	mov	r5, r1
 80008ca:	b09d      	sub	sp, #116	; 0x74
 80008cc:	4614      	mov	r4, r2
 80008ce:	4698      	mov	r8, r3
 80008d0:	4606      	mov	r6, r0
 80008d2:	b118      	cbz	r0, 80008dc <_vfiprintf_r+0x18>
 80008d4:	6a03      	ldr	r3, [r0, #32]
 80008d6:	b90b      	cbnz	r3, 80008dc <_vfiprintf_r+0x18>
 80008d8:	f7ff ff4e 	bl	8000778 <__sinit>
 80008dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80008de:	07d9      	lsls	r1, r3, #31
 80008e0:	d405      	bmi.n	80008ee <_vfiprintf_r+0x2a>
 80008e2:	89ab      	ldrh	r3, [r5, #12]
 80008e4:	059a      	lsls	r2, r3, #22
 80008e6:	d402      	bmi.n	80008ee <_vfiprintf_r+0x2a>
 80008e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80008ea:	f7ff ffbf 	bl	800086c <__retarget_lock_acquire_recursive>
 80008ee:	89ab      	ldrh	r3, [r5, #12]
 80008f0:	071b      	lsls	r3, r3, #28
 80008f2:	d501      	bpl.n	80008f8 <_vfiprintf_r+0x34>
 80008f4:	692b      	ldr	r3, [r5, #16]
 80008f6:	b99b      	cbnz	r3, 8000920 <_vfiprintf_r+0x5c>
 80008f8:	4629      	mov	r1, r5
 80008fa:	4630      	mov	r0, r6
 80008fc:	f000 fc66 	bl	80011cc <__swsetup_r>
 8000900:	b170      	cbz	r0, 8000920 <_vfiprintf_r+0x5c>
 8000902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000904:	07dc      	lsls	r4, r3, #31
 8000906:	d504      	bpl.n	8000912 <_vfiprintf_r+0x4e>
 8000908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800090c:	b01d      	add	sp, #116	; 0x74
 800090e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000912:	89ab      	ldrh	r3, [r5, #12]
 8000914:	0598      	lsls	r0, r3, #22
 8000916:	d4f7      	bmi.n	8000908 <_vfiprintf_r+0x44>
 8000918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800091a:	f7ff ffa8 	bl	800086e <__retarget_lock_release_recursive>
 800091e:	e7f3      	b.n	8000908 <_vfiprintf_r+0x44>
 8000920:	2300      	movs	r3, #0
 8000922:	9309      	str	r3, [sp, #36]	; 0x24
 8000924:	2320      	movs	r3, #32
 8000926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800092a:	f8cd 800c 	str.w	r8, [sp, #12]
 800092e:	2330      	movs	r3, #48	; 0x30
 8000930:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000ae4 <_vfiprintf_r+0x220>
 8000934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000938:	f04f 0901 	mov.w	r9, #1
 800093c:	4623      	mov	r3, r4
 800093e:	469a      	mov	sl, r3
 8000940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000944:	b10a      	cbz	r2, 800094a <_vfiprintf_r+0x86>
 8000946:	2a25      	cmp	r2, #37	; 0x25
 8000948:	d1f9      	bne.n	800093e <_vfiprintf_r+0x7a>
 800094a:	ebba 0b04 	subs.w	fp, sl, r4
 800094e:	d00b      	beq.n	8000968 <_vfiprintf_r+0xa4>
 8000950:	465b      	mov	r3, fp
 8000952:	4622      	mov	r2, r4
 8000954:	4629      	mov	r1, r5
 8000956:	4630      	mov	r0, r6
 8000958:	f7ff ffa1 	bl	800089e <__sfputs_r>
 800095c:	3001      	adds	r0, #1
 800095e:	f000 80a9 	beq.w	8000ab4 <_vfiprintf_r+0x1f0>
 8000962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000964:	445a      	add	r2, fp
 8000966:	9209      	str	r2, [sp, #36]	; 0x24
 8000968:	f89a 3000 	ldrb.w	r3, [sl]
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 80a1 	beq.w	8000ab4 <_vfiprintf_r+0x1f0>
 8000972:	2300      	movs	r3, #0
 8000974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800097c:	f10a 0a01 	add.w	sl, sl, #1
 8000980:	9304      	str	r3, [sp, #16]
 8000982:	9307      	str	r3, [sp, #28]
 8000984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000988:	931a      	str	r3, [sp, #104]	; 0x68
 800098a:	4654      	mov	r4, sl
 800098c:	2205      	movs	r2, #5
 800098e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000992:	4854      	ldr	r0, [pc, #336]	; (8000ae4 <_vfiprintf_r+0x220>)
 8000994:	f7ff fc24 	bl	80001e0 <memchr>
 8000998:	9a04      	ldr	r2, [sp, #16]
 800099a:	b9d8      	cbnz	r0, 80009d4 <_vfiprintf_r+0x110>
 800099c:	06d1      	lsls	r1, r2, #27
 800099e:	bf44      	itt	mi
 80009a0:	2320      	movmi	r3, #32
 80009a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80009a6:	0713      	lsls	r3, r2, #28
 80009a8:	bf44      	itt	mi
 80009aa:	232b      	movmi	r3, #43	; 0x2b
 80009ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80009b0:	f89a 3000 	ldrb.w	r3, [sl]
 80009b4:	2b2a      	cmp	r3, #42	; 0x2a
 80009b6:	d015      	beq.n	80009e4 <_vfiprintf_r+0x120>
 80009b8:	9a07      	ldr	r2, [sp, #28]
 80009ba:	4654      	mov	r4, sl
 80009bc:	2000      	movs	r0, #0
 80009be:	f04f 0c0a 	mov.w	ip, #10
 80009c2:	4621      	mov	r1, r4
 80009c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009c8:	3b30      	subs	r3, #48	; 0x30
 80009ca:	2b09      	cmp	r3, #9
 80009cc:	d94d      	bls.n	8000a6a <_vfiprintf_r+0x1a6>
 80009ce:	b1b0      	cbz	r0, 80009fe <_vfiprintf_r+0x13a>
 80009d0:	9207      	str	r2, [sp, #28]
 80009d2:	e014      	b.n	80009fe <_vfiprintf_r+0x13a>
 80009d4:	eba0 0308 	sub.w	r3, r0, r8
 80009d8:	fa09 f303 	lsl.w	r3, r9, r3
 80009dc:	4313      	orrs	r3, r2
 80009de:	9304      	str	r3, [sp, #16]
 80009e0:	46a2      	mov	sl, r4
 80009e2:	e7d2      	b.n	800098a <_vfiprintf_r+0xc6>
 80009e4:	9b03      	ldr	r3, [sp, #12]
 80009e6:	1d19      	adds	r1, r3, #4
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	9103      	str	r1, [sp, #12]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bfbb      	ittet	lt
 80009f0:	425b      	neglt	r3, r3
 80009f2:	f042 0202 	orrlt.w	r2, r2, #2
 80009f6:	9307      	strge	r3, [sp, #28]
 80009f8:	9307      	strlt	r3, [sp, #28]
 80009fa:	bfb8      	it	lt
 80009fc:	9204      	strlt	r2, [sp, #16]
 80009fe:	7823      	ldrb	r3, [r4, #0]
 8000a00:	2b2e      	cmp	r3, #46	; 0x2e
 8000a02:	d10c      	bne.n	8000a1e <_vfiprintf_r+0x15a>
 8000a04:	7863      	ldrb	r3, [r4, #1]
 8000a06:	2b2a      	cmp	r3, #42	; 0x2a
 8000a08:	d134      	bne.n	8000a74 <_vfiprintf_r+0x1b0>
 8000a0a:	9b03      	ldr	r3, [sp, #12]
 8000a0c:	1d1a      	adds	r2, r3, #4
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	9203      	str	r2, [sp, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bfb8      	it	lt
 8000a16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000a1a:	3402      	adds	r4, #2
 8000a1c:	9305      	str	r3, [sp, #20]
 8000a1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000af4 <_vfiprintf_r+0x230>
 8000a22:	7821      	ldrb	r1, [r4, #0]
 8000a24:	2203      	movs	r2, #3
 8000a26:	4650      	mov	r0, sl
 8000a28:	f7ff fbda 	bl	80001e0 <memchr>
 8000a2c:	b138      	cbz	r0, 8000a3e <_vfiprintf_r+0x17a>
 8000a2e:	9b04      	ldr	r3, [sp, #16]
 8000a30:	eba0 000a 	sub.w	r0, r0, sl
 8000a34:	2240      	movs	r2, #64	; 0x40
 8000a36:	4082      	lsls	r2, r0
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	3401      	adds	r4, #1
 8000a3c:	9304      	str	r3, [sp, #16]
 8000a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a42:	4829      	ldr	r0, [pc, #164]	; (8000ae8 <_vfiprintf_r+0x224>)
 8000a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000a48:	2206      	movs	r2, #6
 8000a4a:	f7ff fbc9 	bl	80001e0 <memchr>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d03f      	beq.n	8000ad2 <_vfiprintf_r+0x20e>
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <_vfiprintf_r+0x228>)
 8000a54:	bb1b      	cbnz	r3, 8000a9e <_vfiprintf_r+0x1da>
 8000a56:	9b03      	ldr	r3, [sp, #12]
 8000a58:	3307      	adds	r3, #7
 8000a5a:	f023 0307 	bic.w	r3, r3, #7
 8000a5e:	3308      	adds	r3, #8
 8000a60:	9303      	str	r3, [sp, #12]
 8000a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a64:	443b      	add	r3, r7
 8000a66:	9309      	str	r3, [sp, #36]	; 0x24
 8000a68:	e768      	b.n	800093c <_vfiprintf_r+0x78>
 8000a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a6e:	460c      	mov	r4, r1
 8000a70:	2001      	movs	r0, #1
 8000a72:	e7a6      	b.n	80009c2 <_vfiprintf_r+0xfe>
 8000a74:	2300      	movs	r3, #0
 8000a76:	3401      	adds	r4, #1
 8000a78:	9305      	str	r3, [sp, #20]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 0c0a 	mov.w	ip, #10
 8000a80:	4620      	mov	r0, r4
 8000a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a86:	3a30      	subs	r2, #48	; 0x30
 8000a88:	2a09      	cmp	r2, #9
 8000a8a:	d903      	bls.n	8000a94 <_vfiprintf_r+0x1d0>
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0c6      	beq.n	8000a1e <_vfiprintf_r+0x15a>
 8000a90:	9105      	str	r1, [sp, #20]
 8000a92:	e7c4      	b.n	8000a1e <_vfiprintf_r+0x15a>
 8000a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a98:	4604      	mov	r4, r0
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e7f0      	b.n	8000a80 <_vfiprintf_r+0x1bc>
 8000a9e:	ab03      	add	r3, sp, #12
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	462a      	mov	r2, r5
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <_vfiprintf_r+0x22c>)
 8000aa6:	a904      	add	r1, sp, #16
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	f3af 8000 	nop.w
 8000aae:	4607      	mov	r7, r0
 8000ab0:	1c78      	adds	r0, r7, #1
 8000ab2:	d1d6      	bne.n	8000a62 <_vfiprintf_r+0x19e>
 8000ab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ab6:	07d9      	lsls	r1, r3, #31
 8000ab8:	d405      	bmi.n	8000ac6 <_vfiprintf_r+0x202>
 8000aba:	89ab      	ldrh	r3, [r5, #12]
 8000abc:	059a      	lsls	r2, r3, #22
 8000abe:	d402      	bmi.n	8000ac6 <_vfiprintf_r+0x202>
 8000ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ac2:	f7ff fed4 	bl	800086e <__retarget_lock_release_recursive>
 8000ac6:	89ab      	ldrh	r3, [r5, #12]
 8000ac8:	065b      	lsls	r3, r3, #25
 8000aca:	f53f af1d 	bmi.w	8000908 <_vfiprintf_r+0x44>
 8000ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ad0:	e71c      	b.n	800090c <_vfiprintf_r+0x48>
 8000ad2:	ab03      	add	r3, sp, #12
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	462a      	mov	r2, r5
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <_vfiprintf_r+0x22c>)
 8000ada:	a904      	add	r1, sp, #16
 8000adc:	4630      	mov	r0, r6
 8000ade:	f000 f919 	bl	8000d14 <_printf_i>
 8000ae2:	e7e4      	b.n	8000aae <_vfiprintf_r+0x1ea>
 8000ae4:	080014f4 	.word	0x080014f4
 8000ae8:	080014fe 	.word	0x080014fe
 8000aec:	00000000 	.word	0x00000000
 8000af0:	0800089f 	.word	0x0800089f
 8000af4:	080014fa 	.word	0x080014fa

08000af8 <sbrk_aligned>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	4e0e      	ldr	r6, [pc, #56]	; (8000b34 <sbrk_aligned+0x3c>)
 8000afc:	460c      	mov	r4, r1
 8000afe:	6831      	ldr	r1, [r6, #0]
 8000b00:	4605      	mov	r5, r0
 8000b02:	b911      	cbnz	r1, 8000b0a <sbrk_aligned+0x12>
 8000b04:	f000 fc72 	bl	80013ec <_sbrk_r>
 8000b08:	6030      	str	r0, [r6, #0]
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f000 fc6d 	bl	80013ec <_sbrk_r>
 8000b12:	1c43      	adds	r3, r0, #1
 8000b14:	d00a      	beq.n	8000b2c <sbrk_aligned+0x34>
 8000b16:	1cc4      	adds	r4, r0, #3
 8000b18:	f024 0403 	bic.w	r4, r4, #3
 8000b1c:	42a0      	cmp	r0, r4
 8000b1e:	d007      	beq.n	8000b30 <sbrk_aligned+0x38>
 8000b20:	1a21      	subs	r1, r4, r0
 8000b22:	4628      	mov	r0, r5
 8000b24:	f000 fc62 	bl	80013ec <_sbrk_r>
 8000b28:	3001      	adds	r0, #1
 8000b2a:	d101      	bne.n	8000b30 <sbrk_aligned+0x38>
 8000b2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000b30:	4620      	mov	r0, r4
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
 8000b34:	200001c4 	.word	0x200001c4

08000b38 <_malloc_r>:
 8000b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b3c:	1ccd      	adds	r5, r1, #3
 8000b3e:	f025 0503 	bic.w	r5, r5, #3
 8000b42:	3508      	adds	r5, #8
 8000b44:	2d0c      	cmp	r5, #12
 8000b46:	bf38      	it	cc
 8000b48:	250c      	movcc	r5, #12
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	4607      	mov	r7, r0
 8000b4e:	db01      	blt.n	8000b54 <_malloc_r+0x1c>
 8000b50:	42a9      	cmp	r1, r5
 8000b52:	d905      	bls.n	8000b60 <_malloc_r+0x28>
 8000b54:	230c      	movs	r3, #12
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	2600      	movs	r6, #0
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c34 <_malloc_r+0xfc>
 8000b64:	f000 faa6 	bl	80010b4 <__malloc_lock>
 8000b68:	f8d8 3000 	ldr.w	r3, [r8]
 8000b6c:	461c      	mov	r4, r3
 8000b6e:	bb5c      	cbnz	r4, 8000bc8 <_malloc_r+0x90>
 8000b70:	4629      	mov	r1, r5
 8000b72:	4638      	mov	r0, r7
 8000b74:	f7ff ffc0 	bl	8000af8 <sbrk_aligned>
 8000b78:	1c43      	adds	r3, r0, #1
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	d155      	bne.n	8000c2a <_malloc_r+0xf2>
 8000b7e:	f8d8 4000 	ldr.w	r4, [r8]
 8000b82:	4626      	mov	r6, r4
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d145      	bne.n	8000c14 <_malloc_r+0xdc>
 8000b88:	2c00      	cmp	r4, #0
 8000b8a:	d048      	beq.n	8000c1e <_malloc_r+0xe6>
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	4631      	mov	r1, r6
 8000b90:	4638      	mov	r0, r7
 8000b92:	eb04 0903 	add.w	r9, r4, r3
 8000b96:	f000 fc29 	bl	80013ec <_sbrk_r>
 8000b9a:	4581      	cmp	r9, r0
 8000b9c:	d13f      	bne.n	8000c1e <_malloc_r+0xe6>
 8000b9e:	6821      	ldr	r1, [r4, #0]
 8000ba0:	1a6d      	subs	r5, r5, r1
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	4638      	mov	r0, r7
 8000ba6:	f7ff ffa7 	bl	8000af8 <sbrk_aligned>
 8000baa:	3001      	adds	r0, #1
 8000bac:	d037      	beq.n	8000c1e <_malloc_r+0xe6>
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	442b      	add	r3, r5
 8000bb2:	6023      	str	r3, [r4, #0]
 8000bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d038      	beq.n	8000c2e <_malloc_r+0xf6>
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	42a2      	cmp	r2, r4
 8000bc0:	d12b      	bne.n	8000c1a <_malloc_r+0xe2>
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	e00f      	b.n	8000be8 <_malloc_r+0xb0>
 8000bc8:	6822      	ldr	r2, [r4, #0]
 8000bca:	1b52      	subs	r2, r2, r5
 8000bcc:	d41f      	bmi.n	8000c0e <_malloc_r+0xd6>
 8000bce:	2a0b      	cmp	r2, #11
 8000bd0:	d917      	bls.n	8000c02 <_malloc_r+0xca>
 8000bd2:	1961      	adds	r1, r4, r5
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	6025      	str	r5, [r4, #0]
 8000bd8:	bf18      	it	ne
 8000bda:	6059      	strne	r1, [r3, #4]
 8000bdc:	6863      	ldr	r3, [r4, #4]
 8000bde:	bf08      	it	eq
 8000be0:	f8c8 1000 	streq.w	r1, [r8]
 8000be4:	5162      	str	r2, [r4, r5]
 8000be6:	604b      	str	r3, [r1, #4]
 8000be8:	4638      	mov	r0, r7
 8000bea:	f104 060b 	add.w	r6, r4, #11
 8000bee:	f000 fa67 	bl	80010c0 <__malloc_unlock>
 8000bf2:	f026 0607 	bic.w	r6, r6, #7
 8000bf6:	1d23      	adds	r3, r4, #4
 8000bf8:	1af2      	subs	r2, r6, r3
 8000bfa:	d0ae      	beq.n	8000b5a <_malloc_r+0x22>
 8000bfc:	1b9b      	subs	r3, r3, r6
 8000bfe:	50a3      	str	r3, [r4, r2]
 8000c00:	e7ab      	b.n	8000b5a <_malloc_r+0x22>
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	6862      	ldr	r2, [r4, #4]
 8000c06:	d1dd      	bne.n	8000bc4 <_malloc_r+0x8c>
 8000c08:	f8c8 2000 	str.w	r2, [r8]
 8000c0c:	e7ec      	b.n	8000be8 <_malloc_r+0xb0>
 8000c0e:	4623      	mov	r3, r4
 8000c10:	6864      	ldr	r4, [r4, #4]
 8000c12:	e7ac      	b.n	8000b6e <_malloc_r+0x36>
 8000c14:	4634      	mov	r4, r6
 8000c16:	6876      	ldr	r6, [r6, #4]
 8000c18:	e7b4      	b.n	8000b84 <_malloc_r+0x4c>
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	e7cc      	b.n	8000bb8 <_malloc_r+0x80>
 8000c1e:	230c      	movs	r3, #12
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4638      	mov	r0, r7
 8000c24:	f000 fa4c 	bl	80010c0 <__malloc_unlock>
 8000c28:	e797      	b.n	8000b5a <_malloc_r+0x22>
 8000c2a:	6025      	str	r5, [r4, #0]
 8000c2c:	e7dc      	b.n	8000be8 <_malloc_r+0xb0>
 8000c2e:	605b      	str	r3, [r3, #4]
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	bf00      	nop
 8000c34:	200001c0 	.word	0x200001c0

08000c38 <_printf_common>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	4616      	mov	r6, r2
 8000c3e:	4699      	mov	r9, r3
 8000c40:	688a      	ldr	r2, [r1, #8]
 8000c42:	690b      	ldr	r3, [r1, #16]
 8000c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	bfb8      	it	lt
 8000c4c:	4613      	movlt	r3, r2
 8000c4e:	6033      	str	r3, [r6, #0]
 8000c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c54:	4607      	mov	r7, r0
 8000c56:	460c      	mov	r4, r1
 8000c58:	b10a      	cbz	r2, 8000c5e <_printf_common+0x26>
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	6033      	str	r3, [r6, #0]
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	0699      	lsls	r1, r3, #26
 8000c62:	bf42      	ittt	mi
 8000c64:	6833      	ldrmi	r3, [r6, #0]
 8000c66:	3302      	addmi	r3, #2
 8000c68:	6033      	strmi	r3, [r6, #0]
 8000c6a:	6825      	ldr	r5, [r4, #0]
 8000c6c:	f015 0506 	ands.w	r5, r5, #6
 8000c70:	d106      	bne.n	8000c80 <_printf_common+0x48>
 8000c72:	f104 0a19 	add.w	sl, r4, #25
 8000c76:	68e3      	ldr	r3, [r4, #12]
 8000c78:	6832      	ldr	r2, [r6, #0]
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	42ab      	cmp	r3, r5
 8000c7e:	dc26      	bgt.n	8000cce <_printf_common+0x96>
 8000c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c84:	1e13      	subs	r3, r2, #0
 8000c86:	6822      	ldr	r2, [r4, #0]
 8000c88:	bf18      	it	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	0692      	lsls	r2, r2, #26
 8000c8e:	d42b      	bmi.n	8000ce8 <_printf_common+0xb0>
 8000c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c94:	4649      	mov	r1, r9
 8000c96:	4638      	mov	r0, r7
 8000c98:	47c0      	blx	r8
 8000c9a:	3001      	adds	r0, #1
 8000c9c:	d01e      	beq.n	8000cdc <_printf_common+0xa4>
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	6922      	ldr	r2, [r4, #16]
 8000ca2:	f003 0306 	and.w	r3, r3, #6
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf02      	ittt	eq
 8000caa:	68e5      	ldreq	r5, [r4, #12]
 8000cac:	6833      	ldreq	r3, [r6, #0]
 8000cae:	1aed      	subeq	r5, r5, r3
 8000cb0:	68a3      	ldr	r3, [r4, #8]
 8000cb2:	bf0c      	ite	eq
 8000cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cb8:	2500      	movne	r5, #0
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	bfc4      	itt	gt
 8000cbe:	1a9b      	subgt	r3, r3, r2
 8000cc0:	18ed      	addgt	r5, r5, r3
 8000cc2:	2600      	movs	r6, #0
 8000cc4:	341a      	adds	r4, #26
 8000cc6:	42b5      	cmp	r5, r6
 8000cc8:	d11a      	bne.n	8000d00 <_printf_common+0xc8>
 8000cca:	2000      	movs	r0, #0
 8000ccc:	e008      	b.n	8000ce0 <_printf_common+0xa8>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	4638      	mov	r0, r7
 8000cd6:	47c0      	blx	r8
 8000cd8:	3001      	adds	r0, #1
 8000cda:	d103      	bne.n	8000ce4 <_printf_common+0xac>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	3501      	adds	r5, #1
 8000ce6:	e7c6      	b.n	8000c76 <_printf_common+0x3e>
 8000ce8:	18e1      	adds	r1, r4, r3
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	2030      	movs	r0, #48	; 0x30
 8000cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cf2:	4422      	add	r2, r4
 8000cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	e7c7      	b.n	8000c90 <_printf_common+0x58>
 8000d00:	2301      	movs	r3, #1
 8000d02:	4622      	mov	r2, r4
 8000d04:	4649      	mov	r1, r9
 8000d06:	4638      	mov	r0, r7
 8000d08:	47c0      	blx	r8
 8000d0a:	3001      	adds	r0, #1
 8000d0c:	d0e6      	beq.n	8000cdc <_printf_common+0xa4>
 8000d0e:	3601      	adds	r6, #1
 8000d10:	e7d9      	b.n	8000cc6 <_printf_common+0x8e>
	...

08000d14 <_printf_i>:
 8000d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	7e0f      	ldrb	r7, [r1, #24]
 8000d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d1c:	2f78      	cmp	r7, #120	; 0x78
 8000d1e:	4691      	mov	r9, r2
 8000d20:	4680      	mov	r8, r0
 8000d22:	460c      	mov	r4, r1
 8000d24:	469a      	mov	sl, r3
 8000d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d2a:	d807      	bhi.n	8000d3c <_printf_i+0x28>
 8000d2c:	2f62      	cmp	r7, #98	; 0x62
 8000d2e:	d80a      	bhi.n	8000d46 <_printf_i+0x32>
 8000d30:	2f00      	cmp	r7, #0
 8000d32:	f000 80d4 	beq.w	8000ede <_printf_i+0x1ca>
 8000d36:	2f58      	cmp	r7, #88	; 0x58
 8000d38:	f000 80c0 	beq.w	8000ebc <_printf_i+0x1a8>
 8000d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d44:	e03a      	b.n	8000dbc <_printf_i+0xa8>
 8000d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d4a:	2b15      	cmp	r3, #21
 8000d4c:	d8f6      	bhi.n	8000d3c <_printf_i+0x28>
 8000d4e:	a101      	add	r1, pc, #4	; (adr r1, 8000d54 <_printf_i+0x40>)
 8000d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d54:	08000dad 	.word	0x08000dad
 8000d58:	08000dc1 	.word	0x08000dc1
 8000d5c:	08000d3d 	.word	0x08000d3d
 8000d60:	08000d3d 	.word	0x08000d3d
 8000d64:	08000d3d 	.word	0x08000d3d
 8000d68:	08000d3d 	.word	0x08000d3d
 8000d6c:	08000dc1 	.word	0x08000dc1
 8000d70:	08000d3d 	.word	0x08000d3d
 8000d74:	08000d3d 	.word	0x08000d3d
 8000d78:	08000d3d 	.word	0x08000d3d
 8000d7c:	08000d3d 	.word	0x08000d3d
 8000d80:	08000ec5 	.word	0x08000ec5
 8000d84:	08000ded 	.word	0x08000ded
 8000d88:	08000e7f 	.word	0x08000e7f
 8000d8c:	08000d3d 	.word	0x08000d3d
 8000d90:	08000d3d 	.word	0x08000d3d
 8000d94:	08000ee7 	.word	0x08000ee7
 8000d98:	08000d3d 	.word	0x08000d3d
 8000d9c:	08000ded 	.word	0x08000ded
 8000da0:	08000d3d 	.word	0x08000d3d
 8000da4:	08000d3d 	.word	0x08000d3d
 8000da8:	08000e87 	.word	0x08000e87
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	1d1a      	adds	r2, r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	602a      	str	r2, [r5, #0]
 8000db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e09f      	b.n	8000f00 <_printf_i+0x1ec>
 8000dc0:	6820      	ldr	r0, [r4, #0]
 8000dc2:	682b      	ldr	r3, [r5, #0]
 8000dc4:	0607      	lsls	r7, r0, #24
 8000dc6:	f103 0104 	add.w	r1, r3, #4
 8000dca:	6029      	str	r1, [r5, #0]
 8000dcc:	d501      	bpl.n	8000dd2 <_printf_i+0xbe>
 8000dce:	681e      	ldr	r6, [r3, #0]
 8000dd0:	e003      	b.n	8000dda <_printf_i+0xc6>
 8000dd2:	0646      	lsls	r6, r0, #25
 8000dd4:	d5fb      	bpl.n	8000dce <_printf_i+0xba>
 8000dd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	da03      	bge.n	8000de6 <_printf_i+0xd2>
 8000dde:	232d      	movs	r3, #45	; 0x2d
 8000de0:	4276      	negs	r6, r6
 8000de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000de6:	485a      	ldr	r0, [pc, #360]	; (8000f50 <_printf_i+0x23c>)
 8000de8:	230a      	movs	r3, #10
 8000dea:	e012      	b.n	8000e12 <_printf_i+0xfe>
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	6820      	ldr	r0, [r4, #0]
 8000df0:	1d19      	adds	r1, r3, #4
 8000df2:	6029      	str	r1, [r5, #0]
 8000df4:	0605      	lsls	r5, r0, #24
 8000df6:	d501      	bpl.n	8000dfc <_printf_i+0xe8>
 8000df8:	681e      	ldr	r6, [r3, #0]
 8000dfa:	e002      	b.n	8000e02 <_printf_i+0xee>
 8000dfc:	0641      	lsls	r1, r0, #25
 8000dfe:	d5fb      	bpl.n	8000df8 <_printf_i+0xe4>
 8000e00:	881e      	ldrh	r6, [r3, #0]
 8000e02:	4853      	ldr	r0, [pc, #332]	; (8000f50 <_printf_i+0x23c>)
 8000e04:	2f6f      	cmp	r7, #111	; 0x6f
 8000e06:	bf0c      	ite	eq
 8000e08:	2308      	moveq	r3, #8
 8000e0a:	230a      	movne	r3, #10
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e12:	6865      	ldr	r5, [r4, #4]
 8000e14:	60a5      	str	r5, [r4, #8]
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	bfa2      	ittt	ge
 8000e1a:	6821      	ldrge	r1, [r4, #0]
 8000e1c:	f021 0104 	bicge.w	r1, r1, #4
 8000e20:	6021      	strge	r1, [r4, #0]
 8000e22:	b90e      	cbnz	r6, 8000e28 <_printf_i+0x114>
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d04b      	beq.n	8000ec0 <_printf_i+0x1ac>
 8000e28:	4615      	mov	r5, r2
 8000e2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e2e:	fb03 6711 	mls	r7, r3, r1, r6
 8000e32:	5dc7      	ldrb	r7, [r0, r7]
 8000e34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e38:	4637      	mov	r7, r6
 8000e3a:	42bb      	cmp	r3, r7
 8000e3c:	460e      	mov	r6, r1
 8000e3e:	d9f4      	bls.n	8000e2a <_printf_i+0x116>
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d10b      	bne.n	8000e5c <_printf_i+0x148>
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	07de      	lsls	r6, r3, #31
 8000e48:	d508      	bpl.n	8000e5c <_printf_i+0x148>
 8000e4a:	6923      	ldr	r3, [r4, #16]
 8000e4c:	6861      	ldr	r1, [r4, #4]
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	bfde      	ittt	le
 8000e52:	2330      	movle	r3, #48	; 0x30
 8000e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000e5c:	1b52      	subs	r2, r2, r5
 8000e5e:	6122      	str	r2, [r4, #16]
 8000e60:	f8cd a000 	str.w	sl, [sp]
 8000e64:	464b      	mov	r3, r9
 8000e66:	aa03      	add	r2, sp, #12
 8000e68:	4621      	mov	r1, r4
 8000e6a:	4640      	mov	r0, r8
 8000e6c:	f7ff fee4 	bl	8000c38 <_printf_common>
 8000e70:	3001      	adds	r0, #1
 8000e72:	d14a      	bne.n	8000f0a <_printf_i+0x1f6>
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	b004      	add	sp, #16
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	6023      	str	r3, [r4, #0]
 8000e86:	4833      	ldr	r0, [pc, #204]	; (8000f54 <_printf_i+0x240>)
 8000e88:	2778      	movs	r7, #120	; 0x78
 8000e8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	6829      	ldr	r1, [r5, #0]
 8000e92:	061f      	lsls	r7, r3, #24
 8000e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e98:	d402      	bmi.n	8000ea0 <_printf_i+0x18c>
 8000e9a:	065f      	lsls	r7, r3, #25
 8000e9c:	bf48      	it	mi
 8000e9e:	b2b6      	uxthmi	r6, r6
 8000ea0:	07df      	lsls	r7, r3, #31
 8000ea2:	bf48      	it	mi
 8000ea4:	f043 0320 	orrmi.w	r3, r3, #32
 8000ea8:	6029      	str	r1, [r5, #0]
 8000eaa:	bf48      	it	mi
 8000eac:	6023      	strmi	r3, [r4, #0]
 8000eae:	b91e      	cbnz	r6, 8000eb8 <_printf_i+0x1a4>
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	f023 0320 	bic.w	r3, r3, #32
 8000eb6:	6023      	str	r3, [r4, #0]
 8000eb8:	2310      	movs	r3, #16
 8000eba:	e7a7      	b.n	8000e0c <_printf_i+0xf8>
 8000ebc:	4824      	ldr	r0, [pc, #144]	; (8000f50 <_printf_i+0x23c>)
 8000ebe:	e7e4      	b.n	8000e8a <_printf_i+0x176>
 8000ec0:	4615      	mov	r5, r2
 8000ec2:	e7bd      	b.n	8000e40 <_printf_i+0x12c>
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	6826      	ldr	r6, [r4, #0]
 8000ec8:	6961      	ldr	r1, [r4, #20]
 8000eca:	1d18      	adds	r0, r3, #4
 8000ecc:	6028      	str	r0, [r5, #0]
 8000ece:	0635      	lsls	r5, r6, #24
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	d501      	bpl.n	8000ed8 <_printf_i+0x1c4>
 8000ed4:	6019      	str	r1, [r3, #0]
 8000ed6:	e002      	b.n	8000ede <_printf_i+0x1ca>
 8000ed8:	0670      	lsls	r0, r6, #25
 8000eda:	d5fb      	bpl.n	8000ed4 <_printf_i+0x1c0>
 8000edc:	8019      	strh	r1, [r3, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	6123      	str	r3, [r4, #16]
 8000ee2:	4615      	mov	r5, r2
 8000ee4:	e7bc      	b.n	8000e60 <_printf_i+0x14c>
 8000ee6:	682b      	ldr	r3, [r5, #0]
 8000ee8:	1d1a      	adds	r2, r3, #4
 8000eea:	602a      	str	r2, [r5, #0]
 8000eec:	681d      	ldr	r5, [r3, #0]
 8000eee:	6862      	ldr	r2, [r4, #4]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f7ff f974 	bl	80001e0 <memchr>
 8000ef8:	b108      	cbz	r0, 8000efe <_printf_i+0x1ea>
 8000efa:	1b40      	subs	r0, r0, r5
 8000efc:	6060      	str	r0, [r4, #4]
 8000efe:	6863      	ldr	r3, [r4, #4]
 8000f00:	6123      	str	r3, [r4, #16]
 8000f02:	2300      	movs	r3, #0
 8000f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f08:	e7aa      	b.n	8000e60 <_printf_i+0x14c>
 8000f0a:	6923      	ldr	r3, [r4, #16]
 8000f0c:	462a      	mov	r2, r5
 8000f0e:	4649      	mov	r1, r9
 8000f10:	4640      	mov	r0, r8
 8000f12:	47d0      	blx	sl
 8000f14:	3001      	adds	r0, #1
 8000f16:	d0ad      	beq.n	8000e74 <_printf_i+0x160>
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	079b      	lsls	r3, r3, #30
 8000f1c:	d413      	bmi.n	8000f46 <_printf_i+0x232>
 8000f1e:	68e0      	ldr	r0, [r4, #12]
 8000f20:	9b03      	ldr	r3, [sp, #12]
 8000f22:	4298      	cmp	r0, r3
 8000f24:	bfb8      	it	lt
 8000f26:	4618      	movlt	r0, r3
 8000f28:	e7a6      	b.n	8000e78 <_printf_i+0x164>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	4632      	mov	r2, r6
 8000f2e:	4649      	mov	r1, r9
 8000f30:	4640      	mov	r0, r8
 8000f32:	47d0      	blx	sl
 8000f34:	3001      	adds	r0, #1
 8000f36:	d09d      	beq.n	8000e74 <_printf_i+0x160>
 8000f38:	3501      	adds	r5, #1
 8000f3a:	68e3      	ldr	r3, [r4, #12]
 8000f3c:	9903      	ldr	r1, [sp, #12]
 8000f3e:	1a5b      	subs	r3, r3, r1
 8000f40:	42ab      	cmp	r3, r5
 8000f42:	dcf2      	bgt.n	8000f2a <_printf_i+0x216>
 8000f44:	e7eb      	b.n	8000f1e <_printf_i+0x20a>
 8000f46:	2500      	movs	r5, #0
 8000f48:	f104 0619 	add.w	r6, r4, #25
 8000f4c:	e7f5      	b.n	8000f3a <_printf_i+0x226>
 8000f4e:	bf00      	nop
 8000f50:	08001505 	.word	0x08001505
 8000f54:	08001516 	.word	0x08001516

08000f58 <__sflush_r>:
 8000f58:	898a      	ldrh	r2, [r1, #12]
 8000f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f5e:	4605      	mov	r5, r0
 8000f60:	0710      	lsls	r0, r2, #28
 8000f62:	460c      	mov	r4, r1
 8000f64:	d458      	bmi.n	8001018 <__sflush_r+0xc0>
 8000f66:	684b      	ldr	r3, [r1, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dc05      	bgt.n	8000f78 <__sflush_r+0x20>
 8000f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	dc02      	bgt.n	8000f78 <__sflush_r+0x20>
 8000f72:	2000      	movs	r0, #0
 8000f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	d0f9      	beq.n	8000f72 <__sflush_r+0x1a>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f84:	682f      	ldr	r7, [r5, #0]
 8000f86:	6a21      	ldr	r1, [r4, #32]
 8000f88:	602b      	str	r3, [r5, #0]
 8000f8a:	d032      	beq.n	8000ff2 <__sflush_r+0x9a>
 8000f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f8e:	89a3      	ldrh	r3, [r4, #12]
 8000f90:	075a      	lsls	r2, r3, #29
 8000f92:	d505      	bpl.n	8000fa0 <__sflush_r+0x48>
 8000f94:	6863      	ldr	r3, [r4, #4]
 8000f96:	1ac0      	subs	r0, r0, r3
 8000f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f9a:	b10b      	cbz	r3, 8000fa0 <__sflush_r+0x48>
 8000f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f9e:	1ac0      	subs	r0, r0, r3
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000fa6:	6a21      	ldr	r1, [r4, #32]
 8000fa8:	4628      	mov	r0, r5
 8000faa:	47b0      	blx	r6
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	89a3      	ldrh	r3, [r4, #12]
 8000fb0:	d106      	bne.n	8000fc0 <__sflush_r+0x68>
 8000fb2:	6829      	ldr	r1, [r5, #0]
 8000fb4:	291d      	cmp	r1, #29
 8000fb6:	d82b      	bhi.n	8001010 <__sflush_r+0xb8>
 8000fb8:	4a29      	ldr	r2, [pc, #164]	; (8001060 <__sflush_r+0x108>)
 8000fba:	410a      	asrs	r2, r1
 8000fbc:	07d6      	lsls	r6, r2, #31
 8000fbe:	d427      	bmi.n	8001010 <__sflush_r+0xb8>
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6062      	str	r2, [r4, #4]
 8000fc4:	04d9      	lsls	r1, r3, #19
 8000fc6:	6922      	ldr	r2, [r4, #16]
 8000fc8:	6022      	str	r2, [r4, #0]
 8000fca:	d504      	bpl.n	8000fd6 <__sflush_r+0x7e>
 8000fcc:	1c42      	adds	r2, r0, #1
 8000fce:	d101      	bne.n	8000fd4 <__sflush_r+0x7c>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	b903      	cbnz	r3, 8000fd6 <__sflush_r+0x7e>
 8000fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8000fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fd8:	602f      	str	r7, [r5, #0]
 8000fda:	2900      	cmp	r1, #0
 8000fdc:	d0c9      	beq.n	8000f72 <__sflush_r+0x1a>
 8000fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000fe2:	4299      	cmp	r1, r3
 8000fe4:	d002      	beq.n	8000fec <__sflush_r+0x94>
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f000 fa22 	bl	8001430 <_free_r>
 8000fec:	2000      	movs	r0, #0
 8000fee:	6360      	str	r0, [r4, #52]	; 0x34
 8000ff0:	e7c0      	b.n	8000f74 <__sflush_r+0x1c>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	47b0      	blx	r6
 8000ff8:	1c41      	adds	r1, r0, #1
 8000ffa:	d1c8      	bne.n	8000f8e <__sflush_r+0x36>
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0c5      	beq.n	8000f8e <__sflush_r+0x36>
 8001002:	2b1d      	cmp	r3, #29
 8001004:	d001      	beq.n	800100a <__sflush_r+0xb2>
 8001006:	2b16      	cmp	r3, #22
 8001008:	d101      	bne.n	800100e <__sflush_r+0xb6>
 800100a:	602f      	str	r7, [r5, #0]
 800100c:	e7b1      	b.n	8000f72 <__sflush_r+0x1a>
 800100e:	89a3      	ldrh	r3, [r4, #12]
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	81a3      	strh	r3, [r4, #12]
 8001016:	e7ad      	b.n	8000f74 <__sflush_r+0x1c>
 8001018:	690f      	ldr	r7, [r1, #16]
 800101a:	2f00      	cmp	r7, #0
 800101c:	d0a9      	beq.n	8000f72 <__sflush_r+0x1a>
 800101e:	0793      	lsls	r3, r2, #30
 8001020:	680e      	ldr	r6, [r1, #0]
 8001022:	bf08      	it	eq
 8001024:	694b      	ldreq	r3, [r1, #20]
 8001026:	600f      	str	r7, [r1, #0]
 8001028:	bf18      	it	ne
 800102a:	2300      	movne	r3, #0
 800102c:	eba6 0807 	sub.w	r8, r6, r7
 8001030:	608b      	str	r3, [r1, #8]
 8001032:	f1b8 0f00 	cmp.w	r8, #0
 8001036:	dd9c      	ble.n	8000f72 <__sflush_r+0x1a>
 8001038:	6a21      	ldr	r1, [r4, #32]
 800103a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800103c:	4643      	mov	r3, r8
 800103e:	463a      	mov	r2, r7
 8001040:	4628      	mov	r0, r5
 8001042:	47b0      	blx	r6
 8001044:	2800      	cmp	r0, #0
 8001046:	dc06      	bgt.n	8001056 <__sflush_r+0xfe>
 8001048:	89a3      	ldrh	r3, [r4, #12]
 800104a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104e:	81a3      	strh	r3, [r4, #12]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001054:	e78e      	b.n	8000f74 <__sflush_r+0x1c>
 8001056:	4407      	add	r7, r0
 8001058:	eba8 0800 	sub.w	r8, r8, r0
 800105c:	e7e9      	b.n	8001032 <__sflush_r+0xda>
 800105e:	bf00      	nop
 8001060:	dfbffffe 	.word	0xdfbffffe

08001064 <_fflush_r>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	690b      	ldr	r3, [r1, #16]
 8001068:	4605      	mov	r5, r0
 800106a:	460c      	mov	r4, r1
 800106c:	b913      	cbnz	r3, 8001074 <_fflush_r+0x10>
 800106e:	2500      	movs	r5, #0
 8001070:	4628      	mov	r0, r5
 8001072:	bd38      	pop	{r3, r4, r5, pc}
 8001074:	b118      	cbz	r0, 800107e <_fflush_r+0x1a>
 8001076:	6a03      	ldr	r3, [r0, #32]
 8001078:	b90b      	cbnz	r3, 800107e <_fflush_r+0x1a>
 800107a:	f7ff fb7d 	bl	8000778 <__sinit>
 800107e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f3      	beq.n	800106e <_fflush_r+0xa>
 8001086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001088:	07d0      	lsls	r0, r2, #31
 800108a:	d404      	bmi.n	8001096 <_fflush_r+0x32>
 800108c:	0599      	lsls	r1, r3, #22
 800108e:	d402      	bmi.n	8001096 <_fflush_r+0x32>
 8001090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001092:	f7ff fbeb 	bl	800086c <__retarget_lock_acquire_recursive>
 8001096:	4628      	mov	r0, r5
 8001098:	4621      	mov	r1, r4
 800109a:	f7ff ff5d 	bl	8000f58 <__sflush_r>
 800109e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010a0:	07da      	lsls	r2, r3, #31
 80010a2:	4605      	mov	r5, r0
 80010a4:	d4e4      	bmi.n	8001070 <_fflush_r+0xc>
 80010a6:	89a3      	ldrh	r3, [r4, #12]
 80010a8:	059b      	lsls	r3, r3, #22
 80010aa:	d4e1      	bmi.n	8001070 <_fflush_r+0xc>
 80010ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010ae:	f7ff fbde 	bl	800086e <__retarget_lock_release_recursive>
 80010b2:	e7dd      	b.n	8001070 <_fflush_r+0xc>

080010b4 <__malloc_lock>:
 80010b4:	4801      	ldr	r0, [pc, #4]	; (80010bc <__malloc_lock+0x8>)
 80010b6:	f7ff bbd9 	b.w	800086c <__retarget_lock_acquire_recursive>
 80010ba:	bf00      	nop
 80010bc:	200001bc 	.word	0x200001bc

080010c0 <__malloc_unlock>:
 80010c0:	4801      	ldr	r0, [pc, #4]	; (80010c8 <__malloc_unlock+0x8>)
 80010c2:	f7ff bbd4 	b.w	800086e <__retarget_lock_release_recursive>
 80010c6:	bf00      	nop
 80010c8:	200001bc 	.word	0x200001bc

080010cc <__sread>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	460c      	mov	r4, r1
 80010d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d4:	f000 f978 	bl	80013c8 <_read_r>
 80010d8:	2800      	cmp	r0, #0
 80010da:	bfab      	itete	ge
 80010dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010de:	89a3      	ldrhlt	r3, [r4, #12]
 80010e0:	181b      	addge	r3, r3, r0
 80010e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010e6:	bfac      	ite	ge
 80010e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80010ea:	81a3      	strhlt	r3, [r4, #12]
 80010ec:	bd10      	pop	{r4, pc}

080010ee <__swrite>:
 80010ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010f2:	461f      	mov	r7, r3
 80010f4:	898b      	ldrh	r3, [r1, #12]
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	4605      	mov	r5, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	4616      	mov	r6, r2
 80010fe:	d505      	bpl.n	800110c <__swrite+0x1e>
 8001100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001104:	2302      	movs	r3, #2
 8001106:	2200      	movs	r2, #0
 8001108:	f000 f94c 	bl	80013a4 <_lseek_r>
 800110c:	89a3      	ldrh	r3, [r4, #12]
 800110e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001116:	81a3      	strh	r3, [r4, #12]
 8001118:	4632      	mov	r2, r6
 800111a:	463b      	mov	r3, r7
 800111c:	4628      	mov	r0, r5
 800111e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001122:	f000 b973 	b.w	800140c <_write_r>

08001126 <__sseek>:
 8001126:	b510      	push	{r4, lr}
 8001128:	460c      	mov	r4, r1
 800112a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800112e:	f000 f939 	bl	80013a4 <_lseek_r>
 8001132:	1c43      	adds	r3, r0, #1
 8001134:	89a3      	ldrh	r3, [r4, #12]
 8001136:	bf15      	itete	ne
 8001138:	6560      	strne	r0, [r4, #84]	; 0x54
 800113a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800113e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001142:	81a3      	strheq	r3, [r4, #12]
 8001144:	bf18      	it	ne
 8001146:	81a3      	strhne	r3, [r4, #12]
 8001148:	bd10      	pop	{r4, pc}

0800114a <__sclose>:
 800114a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800114e:	f000 b8f7 	b.w	8001340 <_close_r>

08001152 <__swbuf_r>:
 8001152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001154:	460e      	mov	r6, r1
 8001156:	4614      	mov	r4, r2
 8001158:	4605      	mov	r5, r0
 800115a:	b118      	cbz	r0, 8001164 <__swbuf_r+0x12>
 800115c:	6a03      	ldr	r3, [r0, #32]
 800115e:	b90b      	cbnz	r3, 8001164 <__swbuf_r+0x12>
 8001160:	f7ff fb0a 	bl	8000778 <__sinit>
 8001164:	69a3      	ldr	r3, [r4, #24]
 8001166:	60a3      	str	r3, [r4, #8]
 8001168:	89a3      	ldrh	r3, [r4, #12]
 800116a:	071a      	lsls	r2, r3, #28
 800116c:	d525      	bpl.n	80011ba <__swbuf_r+0x68>
 800116e:	6923      	ldr	r3, [r4, #16]
 8001170:	b31b      	cbz	r3, 80011ba <__swbuf_r+0x68>
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	6922      	ldr	r2, [r4, #16]
 8001176:	1a98      	subs	r0, r3, r2
 8001178:	6963      	ldr	r3, [r4, #20]
 800117a:	b2f6      	uxtb	r6, r6
 800117c:	4283      	cmp	r3, r0
 800117e:	4637      	mov	r7, r6
 8001180:	dc04      	bgt.n	800118c <__swbuf_r+0x3a>
 8001182:	4621      	mov	r1, r4
 8001184:	4628      	mov	r0, r5
 8001186:	f7ff ff6d 	bl	8001064 <_fflush_r>
 800118a:	b9e0      	cbnz	r0, 80011c6 <__swbuf_r+0x74>
 800118c:	68a3      	ldr	r3, [r4, #8]
 800118e:	3b01      	subs	r3, #1
 8001190:	60a3      	str	r3, [r4, #8]
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	6022      	str	r2, [r4, #0]
 8001198:	701e      	strb	r6, [r3, #0]
 800119a:	6962      	ldr	r2, [r4, #20]
 800119c:	1c43      	adds	r3, r0, #1
 800119e:	429a      	cmp	r2, r3
 80011a0:	d004      	beq.n	80011ac <__swbuf_r+0x5a>
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	07db      	lsls	r3, r3, #31
 80011a6:	d506      	bpl.n	80011b6 <__swbuf_r+0x64>
 80011a8:	2e0a      	cmp	r6, #10
 80011aa:	d104      	bne.n	80011b6 <__swbuf_r+0x64>
 80011ac:	4621      	mov	r1, r4
 80011ae:	4628      	mov	r0, r5
 80011b0:	f7ff ff58 	bl	8001064 <_fflush_r>
 80011b4:	b938      	cbnz	r0, 80011c6 <__swbuf_r+0x74>
 80011b6:	4638      	mov	r0, r7
 80011b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ba:	4621      	mov	r1, r4
 80011bc:	4628      	mov	r0, r5
 80011be:	f000 f805 	bl	80011cc <__swsetup_r>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d0d5      	beq.n	8001172 <__swbuf_r+0x20>
 80011c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80011ca:	e7f4      	b.n	80011b6 <__swbuf_r+0x64>

080011cc <__swsetup_r>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <__swsetup_r+0xac>)
 80011d0:	4605      	mov	r5, r0
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	460c      	mov	r4, r1
 80011d6:	b118      	cbz	r0, 80011e0 <__swsetup_r+0x14>
 80011d8:	6a03      	ldr	r3, [r0, #32]
 80011da:	b90b      	cbnz	r3, 80011e0 <__swsetup_r+0x14>
 80011dc:	f7ff facc 	bl	8000778 <__sinit>
 80011e0:	89a3      	ldrh	r3, [r4, #12]
 80011e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011e6:	0718      	lsls	r0, r3, #28
 80011e8:	d422      	bmi.n	8001230 <__swsetup_r+0x64>
 80011ea:	06d9      	lsls	r1, r3, #27
 80011ec:	d407      	bmi.n	80011fe <__swsetup_r+0x32>
 80011ee:	2309      	movs	r3, #9
 80011f0:	602b      	str	r3, [r5, #0]
 80011f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011f6:	81a3      	strh	r3, [r4, #12]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fc:	e034      	b.n	8001268 <__swsetup_r+0x9c>
 80011fe:	0758      	lsls	r0, r3, #29
 8001200:	d512      	bpl.n	8001228 <__swsetup_r+0x5c>
 8001202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001204:	b141      	cbz	r1, 8001218 <__swsetup_r+0x4c>
 8001206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800120a:	4299      	cmp	r1, r3
 800120c:	d002      	beq.n	8001214 <__swsetup_r+0x48>
 800120e:	4628      	mov	r0, r5
 8001210:	f000 f90e 	bl	8001430 <_free_r>
 8001214:	2300      	movs	r3, #0
 8001216:	6363      	str	r3, [r4, #52]	; 0x34
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800121e:	81a3      	strh	r3, [r4, #12]
 8001220:	2300      	movs	r3, #0
 8001222:	6063      	str	r3, [r4, #4]
 8001224:	6923      	ldr	r3, [r4, #16]
 8001226:	6023      	str	r3, [r4, #0]
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	81a3      	strh	r3, [r4, #12]
 8001230:	6923      	ldr	r3, [r4, #16]
 8001232:	b94b      	cbnz	r3, 8001248 <__swsetup_r+0x7c>
 8001234:	89a3      	ldrh	r3, [r4, #12]
 8001236:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800123a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123e:	d003      	beq.n	8001248 <__swsetup_r+0x7c>
 8001240:	4621      	mov	r1, r4
 8001242:	4628      	mov	r0, r5
 8001244:	f000 f840 	bl	80012c8 <__smakebuf_r>
 8001248:	89a0      	ldrh	r0, [r4, #12]
 800124a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800124e:	f010 0301 	ands.w	r3, r0, #1
 8001252:	d00a      	beq.n	800126a <__swsetup_r+0x9e>
 8001254:	2300      	movs	r3, #0
 8001256:	60a3      	str	r3, [r4, #8]
 8001258:	6963      	ldr	r3, [r4, #20]
 800125a:	425b      	negs	r3, r3
 800125c:	61a3      	str	r3, [r4, #24]
 800125e:	6923      	ldr	r3, [r4, #16]
 8001260:	b943      	cbnz	r3, 8001274 <__swsetup_r+0xa8>
 8001262:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001266:	d1c4      	bne.n	80011f2 <__swsetup_r+0x26>
 8001268:	bd38      	pop	{r3, r4, r5, pc}
 800126a:	0781      	lsls	r1, r0, #30
 800126c:	bf58      	it	pl
 800126e:	6963      	ldrpl	r3, [r4, #20]
 8001270:	60a3      	str	r3, [r4, #8]
 8001272:	e7f4      	b.n	800125e <__swsetup_r+0x92>
 8001274:	2000      	movs	r0, #0
 8001276:	e7f7      	b.n	8001268 <__swsetup_r+0x9c>
 8001278:	20000058 	.word	0x20000058

0800127c <__swhatbuf_r>:
 800127c:	b570      	push	{r4, r5, r6, lr}
 800127e:	460c      	mov	r4, r1
 8001280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001284:	2900      	cmp	r1, #0
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	4615      	mov	r5, r2
 800128a:	461e      	mov	r6, r3
 800128c:	da0d      	bge.n	80012aa <__swhatbuf_r+0x2e>
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001294:	f04f 0100 	mov.w	r1, #0
 8001298:	bf0c      	ite	eq
 800129a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800129e:	2340      	movne	r3, #64	; 0x40
 80012a0:	2000      	movs	r0, #0
 80012a2:	6031      	str	r1, [r6, #0]
 80012a4:	602b      	str	r3, [r5, #0]
 80012a6:	b016      	add	sp, #88	; 0x58
 80012a8:	bd70      	pop	{r4, r5, r6, pc}
 80012aa:	466a      	mov	r2, sp
 80012ac:	f000 f858 	bl	8001360 <_fstat_r>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	dbec      	blt.n	800128e <__swhatbuf_r+0x12>
 80012b4:	9901      	ldr	r1, [sp, #4]
 80012b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80012ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80012be:	4259      	negs	r1, r3
 80012c0:	4159      	adcs	r1, r3
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	e7eb      	b.n	80012a0 <__swhatbuf_r+0x24>

080012c8 <__smakebuf_r>:
 80012c8:	898b      	ldrh	r3, [r1, #12]
 80012ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012cc:	079d      	lsls	r5, r3, #30
 80012ce:	4606      	mov	r6, r0
 80012d0:	460c      	mov	r4, r1
 80012d2:	d507      	bpl.n	80012e4 <__smakebuf_r+0x1c>
 80012d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	6123      	str	r3, [r4, #16]
 80012dc:	2301      	movs	r3, #1
 80012de:	6163      	str	r3, [r4, #20]
 80012e0:	b002      	add	sp, #8
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	ab01      	add	r3, sp, #4
 80012e6:	466a      	mov	r2, sp
 80012e8:	f7ff ffc8 	bl	800127c <__swhatbuf_r>
 80012ec:	9900      	ldr	r1, [sp, #0]
 80012ee:	4605      	mov	r5, r0
 80012f0:	4630      	mov	r0, r6
 80012f2:	f7ff fc21 	bl	8000b38 <_malloc_r>
 80012f6:	b948      	cbnz	r0, 800130c <__smakebuf_r+0x44>
 80012f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012fc:	059a      	lsls	r2, r3, #22
 80012fe:	d4ef      	bmi.n	80012e0 <__smakebuf_r+0x18>
 8001300:	f023 0303 	bic.w	r3, r3, #3
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	81a3      	strh	r3, [r4, #12]
 800130a:	e7e3      	b.n	80012d4 <__smakebuf_r+0xc>
 800130c:	89a3      	ldrh	r3, [r4, #12]
 800130e:	6020      	str	r0, [r4, #0]
 8001310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001314:	81a3      	strh	r3, [r4, #12]
 8001316:	9b00      	ldr	r3, [sp, #0]
 8001318:	6163      	str	r3, [r4, #20]
 800131a:	9b01      	ldr	r3, [sp, #4]
 800131c:	6120      	str	r0, [r4, #16]
 800131e:	b15b      	cbz	r3, 8001338 <__smakebuf_r+0x70>
 8001320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001324:	4630      	mov	r0, r6
 8001326:	f000 f82d 	bl	8001384 <_isatty_r>
 800132a:	b128      	cbz	r0, 8001338 <__smakebuf_r+0x70>
 800132c:	89a3      	ldrh	r3, [r4, #12]
 800132e:	f023 0303 	bic.w	r3, r3, #3
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	81a3      	strh	r3, [r4, #12]
 8001338:	89a3      	ldrh	r3, [r4, #12]
 800133a:	431d      	orrs	r5, r3
 800133c:	81a5      	strh	r5, [r4, #12]
 800133e:	e7cf      	b.n	80012e0 <__smakebuf_r+0x18>

08001340 <_close_r>:
 8001340:	b538      	push	{r3, r4, r5, lr}
 8001342:	4d06      	ldr	r5, [pc, #24]	; (800135c <_close_r+0x1c>)
 8001344:	2300      	movs	r3, #0
 8001346:	4604      	mov	r4, r0
 8001348:	4608      	mov	r0, r1
 800134a:	602b      	str	r3, [r5, #0]
 800134c:	f7ff f86f 	bl	800042e <_close>
 8001350:	1c43      	adds	r3, r0, #1
 8001352:	d102      	bne.n	800135a <_close_r+0x1a>
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	b103      	cbz	r3, 800135a <_close_r+0x1a>
 8001358:	6023      	str	r3, [r4, #0]
 800135a:	bd38      	pop	{r3, r4, r5, pc}
 800135c:	200001c8 	.word	0x200001c8

08001360 <_fstat_r>:
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4d07      	ldr	r5, [pc, #28]	; (8001380 <_fstat_r+0x20>)
 8001364:	2300      	movs	r3, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	602b      	str	r3, [r5, #0]
 800136e:	f7ff f86a 	bl	8000446 <_fstat>
 8001372:	1c43      	adds	r3, r0, #1
 8001374:	d102      	bne.n	800137c <_fstat_r+0x1c>
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	b103      	cbz	r3, 800137c <_fstat_r+0x1c>
 800137a:	6023      	str	r3, [r4, #0]
 800137c:	bd38      	pop	{r3, r4, r5, pc}
 800137e:	bf00      	nop
 8001380:	200001c8 	.word	0x200001c8

08001384 <_isatty_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	4d06      	ldr	r5, [pc, #24]	; (80013a0 <_isatty_r+0x1c>)
 8001388:	2300      	movs	r3, #0
 800138a:	4604      	mov	r4, r0
 800138c:	4608      	mov	r0, r1
 800138e:	602b      	str	r3, [r5, #0]
 8001390:	f7ff f869 	bl	8000466 <_isatty>
 8001394:	1c43      	adds	r3, r0, #1
 8001396:	d102      	bne.n	800139e <_isatty_r+0x1a>
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	b103      	cbz	r3, 800139e <_isatty_r+0x1a>
 800139c:	6023      	str	r3, [r4, #0]
 800139e:	bd38      	pop	{r3, r4, r5, pc}
 80013a0:	200001c8 	.word	0x200001c8

080013a4 <_lseek_r>:
 80013a4:	b538      	push	{r3, r4, r5, lr}
 80013a6:	4d07      	ldr	r5, [pc, #28]	; (80013c4 <_lseek_r+0x20>)
 80013a8:	4604      	mov	r4, r0
 80013aa:	4608      	mov	r0, r1
 80013ac:	4611      	mov	r1, r2
 80013ae:	2200      	movs	r2, #0
 80013b0:	602a      	str	r2, [r5, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	f7ff f862 	bl	800047c <_lseek>
 80013b8:	1c43      	adds	r3, r0, #1
 80013ba:	d102      	bne.n	80013c2 <_lseek_r+0x1e>
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	b103      	cbz	r3, 80013c2 <_lseek_r+0x1e>
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
 80013c4:	200001c8 	.word	0x200001c8

080013c8 <_read_r>:
 80013c8:	b538      	push	{r3, r4, r5, lr}
 80013ca:	4d07      	ldr	r5, [pc, #28]	; (80013e8 <_read_r+0x20>)
 80013cc:	4604      	mov	r4, r0
 80013ce:	4608      	mov	r0, r1
 80013d0:	4611      	mov	r1, r2
 80013d2:	2200      	movs	r2, #0
 80013d4:	602a      	str	r2, [r5, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	f7fe fff0 	bl	80003bc <_read>
 80013dc:	1c43      	adds	r3, r0, #1
 80013de:	d102      	bne.n	80013e6 <_read_r+0x1e>
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	b103      	cbz	r3, 80013e6 <_read_r+0x1e>
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	bd38      	pop	{r3, r4, r5, pc}
 80013e8:	200001c8 	.word	0x200001c8

080013ec <_sbrk_r>:
 80013ec:	b538      	push	{r3, r4, r5, lr}
 80013ee:	4d06      	ldr	r5, [pc, #24]	; (8001408 <_sbrk_r+0x1c>)
 80013f0:	2300      	movs	r3, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	4608      	mov	r0, r1
 80013f6:	602b      	str	r3, [r5, #0]
 80013f8:	f7ff f84e 	bl	8000498 <_sbrk>
 80013fc:	1c43      	adds	r3, r0, #1
 80013fe:	d102      	bne.n	8001406 <_sbrk_r+0x1a>
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	b103      	cbz	r3, 8001406 <_sbrk_r+0x1a>
 8001404:	6023      	str	r3, [r4, #0]
 8001406:	bd38      	pop	{r3, r4, r5, pc}
 8001408:	200001c8 	.word	0x200001c8

0800140c <_write_r>:
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	4d07      	ldr	r5, [pc, #28]	; (800142c <_write_r+0x20>)
 8001410:	4604      	mov	r4, r0
 8001412:	4608      	mov	r0, r1
 8001414:	4611      	mov	r1, r2
 8001416:	2200      	movs	r2, #0
 8001418:	602a      	str	r2, [r5, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	f7fe ffeb 	bl	80003f6 <_write>
 8001420:	1c43      	adds	r3, r0, #1
 8001422:	d102      	bne.n	800142a <_write_r+0x1e>
 8001424:	682b      	ldr	r3, [r5, #0]
 8001426:	b103      	cbz	r3, 800142a <_write_r+0x1e>
 8001428:	6023      	str	r3, [r4, #0]
 800142a:	bd38      	pop	{r3, r4, r5, pc}
 800142c:	200001c8 	.word	0x200001c8

08001430 <_free_r>:
 8001430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001432:	2900      	cmp	r1, #0
 8001434:	d044      	beq.n	80014c0 <_free_r+0x90>
 8001436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800143a:	9001      	str	r0, [sp, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f1a1 0404 	sub.w	r4, r1, #4
 8001442:	bfb8      	it	lt
 8001444:	18e4      	addlt	r4, r4, r3
 8001446:	f7ff fe35 	bl	80010b4 <__malloc_lock>
 800144a:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <_free_r+0x94>)
 800144c:	9801      	ldr	r0, [sp, #4]
 800144e:	6813      	ldr	r3, [r2, #0]
 8001450:	b933      	cbnz	r3, 8001460 <_free_r+0x30>
 8001452:	6063      	str	r3, [r4, #4]
 8001454:	6014      	str	r4, [r2, #0]
 8001456:	b003      	add	sp, #12
 8001458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800145c:	f7ff be30 	b.w	80010c0 <__malloc_unlock>
 8001460:	42a3      	cmp	r3, r4
 8001462:	d908      	bls.n	8001476 <_free_r+0x46>
 8001464:	6825      	ldr	r5, [r4, #0]
 8001466:	1961      	adds	r1, r4, r5
 8001468:	428b      	cmp	r3, r1
 800146a:	bf01      	itttt	eq
 800146c:	6819      	ldreq	r1, [r3, #0]
 800146e:	685b      	ldreq	r3, [r3, #4]
 8001470:	1949      	addeq	r1, r1, r5
 8001472:	6021      	streq	r1, [r4, #0]
 8001474:	e7ed      	b.n	8001452 <_free_r+0x22>
 8001476:	461a      	mov	r2, r3
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	b10b      	cbz	r3, 8001480 <_free_r+0x50>
 800147c:	42a3      	cmp	r3, r4
 800147e:	d9fa      	bls.n	8001476 <_free_r+0x46>
 8001480:	6811      	ldr	r1, [r2, #0]
 8001482:	1855      	adds	r5, r2, r1
 8001484:	42a5      	cmp	r5, r4
 8001486:	d10b      	bne.n	80014a0 <_free_r+0x70>
 8001488:	6824      	ldr	r4, [r4, #0]
 800148a:	4421      	add	r1, r4
 800148c:	1854      	adds	r4, r2, r1
 800148e:	42a3      	cmp	r3, r4
 8001490:	6011      	str	r1, [r2, #0]
 8001492:	d1e0      	bne.n	8001456 <_free_r+0x26>
 8001494:	681c      	ldr	r4, [r3, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	6053      	str	r3, [r2, #4]
 800149a:	440c      	add	r4, r1
 800149c:	6014      	str	r4, [r2, #0]
 800149e:	e7da      	b.n	8001456 <_free_r+0x26>
 80014a0:	d902      	bls.n	80014a8 <_free_r+0x78>
 80014a2:	230c      	movs	r3, #12
 80014a4:	6003      	str	r3, [r0, #0]
 80014a6:	e7d6      	b.n	8001456 <_free_r+0x26>
 80014a8:	6825      	ldr	r5, [r4, #0]
 80014aa:	1961      	adds	r1, r4, r5
 80014ac:	428b      	cmp	r3, r1
 80014ae:	bf04      	itt	eq
 80014b0:	6819      	ldreq	r1, [r3, #0]
 80014b2:	685b      	ldreq	r3, [r3, #4]
 80014b4:	6063      	str	r3, [r4, #4]
 80014b6:	bf04      	itt	eq
 80014b8:	1949      	addeq	r1, r1, r5
 80014ba:	6021      	streq	r1, [r4, #0]
 80014bc:	6054      	str	r4, [r2, #4]
 80014be:	e7ca      	b.n	8001456 <_free_r+0x26>
 80014c0:	b003      	add	sp, #12
 80014c2:	bd30      	pop	{r4, r5, pc}
 80014c4:	200001c0 	.word	0x200001c0

080014c8 <_init>:
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	bf00      	nop
 80014cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ce:	bc08      	pop	{r3}
 80014d0:	469e      	mov	lr, r3
 80014d2:	4770      	bx	lr

080014d4 <_fini>:
 80014d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d6:	bf00      	nop
 80014d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014da:	bc08      	pop	{r3}
 80014dc:	469e      	mov	lr, r3
 80014de:	4770      	bx	lr
