
11_Systick_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001448  08001448  00011448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001494  08001494  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001494  08001494  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001494  08001494  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001494  08001494  00011494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001498  08001498  00011498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800149c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080014f8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080014f8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000010cf  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005cf  00000000  00000000  0002119e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00021770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000104  00000000  00000000  000218f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001faa  00000000  00000000  000219f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f74  00000000  00000000  0002399e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000553cc  00000000  00000000  00025912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c10  00000000  00000000  0007ace0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0007b8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001430 	.word	0x08001430

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001430 	.word	0x08001430

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#define PIN5				(1U<<5)
#define LED			PIN5


int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |=GPIOAEN;
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <main+0x48>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <main+0x48>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

		GPIOA->MODER |= (1U<<10);
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <main+0x4c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <main+0x4c>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6013      	str	r3, [r2, #0]
		GPIOA->MODER &=~ (1U<<11);
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x4c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <main+0x4c>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002a6:	6013      	str	r3, [r2, #0]

		uart2_tx_init();
 80002a8:	f000 f8ec 	bl	8000484 <uart2_tx_init>

	while(1)
	{


		printf("A second passed !! \n\r");
 80002ac:	4808      	ldr	r0, [pc, #32]	; (80002d0 <main+0x50>)
 80002ae:	f000 fa4d 	bl	800074c <iprintf>
		GPIOA->ODR ^= LED;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <main+0x4c>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a05      	ldr	r2, [pc, #20]	; (80002cc <main+0x4c>)
 80002b8:	f083 0320 	eor.w	r3, r3, #32
 80002bc:	6153      	str	r3, [r2, #20]
		systickDelayMs(1000);
 80002be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c2:	f000 f8ab 	bl	800041c <systickDelayMs>
		printf("A second passed !! \n\r");
 80002c6:	e7f1      	b.n	80002ac <main+0x2c>
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000
 80002d0:	08001448 	.word	0x08001448

080002d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	e00a      	b.n	80002fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002e6:	f3af 8000 	nop.w
 80002ea:	4601      	mov	r1, r0
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	1c5a      	adds	r2, r3, #1
 80002f0:	60ba      	str	r2, [r7, #8]
 80002f2:	b2ca      	uxtb	r2, r1
 80002f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	3301      	adds	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
 80002fc:	697a      	ldr	r2, [r7, #20]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	429a      	cmp	r2, r3
 8000302:	dbf0      	blt.n	80002e6 <_read+0x12>
  }

  return len;
 8000304:	687b      	ldr	r3, [r7, #4]
}
 8000306:	4618      	mov	r0, r3
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b086      	sub	sp, #24
 8000312:	af00      	add	r7, sp, #0
 8000314:	60f8      	str	r0, [r7, #12]
 8000316:	60b9      	str	r1, [r7, #8]
 8000318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
 800031e:	e009      	b.n	8000334 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	60ba      	str	r2, [r7, #8]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f89f 	bl	800046c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	3301      	adds	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	dbf1      	blt.n	8000320 <_write+0x12>
  }
  return len;
 800033c:	687b      	ldr	r3, [r7, #4]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3718      	adds	r7, #24
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <_close>:

int _close(int file)
{
 8000346:	b480      	push	{r7}
 8000348:	b083      	sub	sp, #12
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800034e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800035e:	b480      	push	{r7}
 8000360:	b083      	sub	sp, #12
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800036e:	605a      	str	r2, [r3, #4]
  return 0;
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr

0800037e <_isatty>:

int _isatty(int file)
{
 800037e:	b480      	push	{r7}
 8000380:	b083      	sub	sp, #12
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000386:	2301      	movs	r3, #1
}
 8000388:	4618      	mov	r0, r3
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
	...

080003b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <_sbrk+0x5c>)
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <_sbrk+0x60>)
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <_sbrk+0x64>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d102      	bne.n	80003d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <_sbrk+0x64>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <_sbrk+0x68>)
 80003d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <_sbrk+0x64>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	693a      	ldr	r2, [r7, #16]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d207      	bcs.n	80003f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e0:	f000 f9ce 	bl	8000780 <__errno>
 80003e4:	4603      	mov	r3, r0
 80003e6:	220c      	movs	r2, #12
 80003e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003ee:	e009      	b.n	8000404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <_sbrk+0x64>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <_sbrk+0x64>)
 8000400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20020000 	.word	0x20020000
 8000410:	00000400 	.word	0x00000400
 8000414:	20000078 	.word	0x20000078
 8000418:	200001c8 	.word	0x200001c8

0800041c <systickDelayMs>:




void systickDelayMs(int delay)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	/*Reload the value in register*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <systickDelayMs+0x4c>)
 8000426:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800042a:	605a      	str	r2, [r3, #4]

	/*Clear the current value register*/
	SysTick->VAL = 0;
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <systickDelayMs+0x4c>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]

	/*Enable SysTick timer and select internal clock source*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSOURCE;
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <systickDelayMs+0x4c>)
 8000434:	2205      	movs	r2, #5
 8000436:	601a      	str	r2, [r3, #0]

	for(int i; i<delay ; i++){
 8000438:	e009      	b.n	800044e <systickDelayMs+0x32>
		/*Wait until CountFlag is SET*/
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0 ){}
 800043a:	bf00      	nop
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <systickDelayMs+0x4c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f9      	beq.n	800043c <systickDelayMs+0x20>
	for(int i; i<delay ; i++){
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3301      	adds	r3, #1
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	429a      	cmp	r2, r3
 8000454:	dbf1      	blt.n	800043a <systickDelayMs+0x1e>

	}
	SysTick->CTRL = 0;
 8000456:	4b04      	ldr	r3, [pc, #16]	; (8000468 <systickDelayMs+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
}
 800045c:	bf00      	nop
 800045e:	3714      	adds	r7, #20
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	e000e010 	.word	0xe000e010

0800046c <__io_putchar>:


void uart2_write(int ch);

int __io_putchar(int ch)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

	uart2_write(ch);
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f000 f851 	bl	800051c <uart2_write>
	return(ch);
 800047a:	687b      	ldr	r3, [r7, #4]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <uart2_tx_init>:
			USART2->CR1 |= CR1_UE;

}

void uart2_tx_init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	/****************Configure UART GPIO*********************/
	/*Enable Clock access to GPIOA*/

	RCC->AHB1ENR |= GPIOAEN;
 8000488:	4b20      	ldr	r3, [pc, #128]	; (800050c <uart2_tx_init+0x88>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a1f      	ldr	r2, [pc, #124]	; (800050c <uart2_tx_init+0x88>)
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	6313      	str	r3, [r2, #48]	; 0x30

			/*Set PA2 mode to alternate function mode*/

			GPIOA->MODER &=~ (1U<<4);
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <uart2_tx_init+0x8c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a1d      	ldr	r2, [pc, #116]	; (8000510 <uart2_tx_init+0x8c>)
 800049a:	f023 0310 	bic.w	r3, r3, #16
 800049e:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |= (1U<<5);
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <uart2_tx_init+0x8c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <uart2_tx_init+0x8c>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6013      	str	r3, [r2, #0]

			/*Set PA2 alternate function type to UART_TX*/
			GPIOA->AFR[0] |= (1U<<8);
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <uart2_tx_init+0x8c>)
 80004ae:	6a1b      	ldr	r3, [r3, #32]
 80004b0:	4a17      	ldr	r2, [pc, #92]	; (8000510 <uart2_tx_init+0x8c>)
 80004b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b6:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] |= (1U<<9);
 80004b8:	4b15      	ldr	r3, [pc, #84]	; (8000510 <uart2_tx_init+0x8c>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	4a14      	ldr	r2, [pc, #80]	; (8000510 <uart2_tx_init+0x8c>)
 80004be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004c2:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] |= (1U<<10);
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <uart2_tx_init+0x8c>)
 80004c6:	6a1b      	ldr	r3, [r3, #32]
 80004c8:	4a11      	ldr	r2, [pc, #68]	; (8000510 <uart2_tx_init+0x8c>)
 80004ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ce:	6213      	str	r3, [r2, #32]
			GPIOA->AFR[0] &= ~(1U<<11);
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <uart2_tx_init+0x8c>)
 80004d2:	6a1b      	ldr	r3, [r3, #32]
 80004d4:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <uart2_tx_init+0x8c>)
 80004d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004da:	6213      	str	r3, [r2, #32]


			/****************Configure uart module ***************/
			/*Enable clock access to uart2 */
			RCC->APB1ENR |= UART2EN;
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <uart2_tx_init+0x88>)
 80004de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <uart2_tx_init+0x88>)
 80004e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e6:	6413      	str	r3, [r2, #64]	; 0x40

			/*Configure baudrate*/
			uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80004e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004ec:	4909      	ldr	r1, [pc, #36]	; (8000514 <uart2_tx_init+0x90>)
 80004ee:	480a      	ldr	r0, [pc, #40]	; (8000518 <uart2_tx_init+0x94>)
 80004f0:	f000 f82c 	bl	800054c <uart_set_baudrate>

			/*Configure the transfer direction*/
			USART2->CR1 =  CR1_TE;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <uart2_tx_init+0x94>)
 80004f6:	2208      	movs	r2, #8
 80004f8:	60da      	str	r2, [r3, #12]

			/*Enable uart module*/
			USART2->CR1 |= CR1_UE;
 80004fa:	4b07      	ldr	r3, [pc, #28]	; (8000518 <uart2_tx_init+0x94>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	4a06      	ldr	r2, [pc, #24]	; (8000518 <uart2_tx_init+0x94>)
 8000500:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000504:	60d3      	str	r3, [r2, #12]

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800
 8000510:	40020000 	.word	0x40020000
 8000514:	00f42400 	.word	0x00f42400
 8000518:	40004400 	.word	0x40004400

0800051c <uart2_write>:
	/*Read Data*/
	USART2->DR;
}

void uart2_write(int ch)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000524:	bf00      	nop
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <uart2_write+0x2c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <uart2_write+0xa>
	/*Write transmit data register*/
	USART2->DR = (ch & 0XFF);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <uart2_write+0x2c>)
 8000536:	b2db      	uxtb	r3, r3
 8000538:	6053      	str	r3, [r2, #4]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40004400 	.word	0x40004400

0800054c <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	68b8      	ldr	r0, [r7, #8]
 800055c:	f000 f808 	bl	8000570 <compute_uart_bd>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	609a      	str	r2, [r3, #8]
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	085a      	lsrs	r2, r3, #1
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	441a      	add	r2, r3
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	fbb2 f3f3 	udiv	r3, r2, r3
 8000588:	b29b      	uxth	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800059c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <LoopForever+0xe>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b8:	4c0a      	ldr	r4, [pc, #40]	; (80005e4 <LoopForever+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c6:	f000 f8e1 	bl	800078c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ca:	f7ff fe59 	bl	8000280 <main>

080005ce <LoopForever>:

LoopForever:
  b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
  ldr   r0, =_estack
 80005d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005dc:	0800149c 	.word	0x0800149c
  ldr r2, =_sbss
 80005e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005e4:	200001c8 	.word	0x200001c8

080005e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC_IRQHandler>
	...

080005ec <std>:
 80005ec:	2300      	movs	r3, #0
 80005ee:	b510      	push	{r4, lr}
 80005f0:	4604      	mov	r4, r0
 80005f2:	e9c0 3300 	strd	r3, r3, [r0]
 80005f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005fa:	6083      	str	r3, [r0, #8]
 80005fc:	8181      	strh	r1, [r0, #12]
 80005fe:	6643      	str	r3, [r0, #100]	; 0x64
 8000600:	81c2      	strh	r2, [r0, #14]
 8000602:	6183      	str	r3, [r0, #24]
 8000604:	4619      	mov	r1, r3
 8000606:	2208      	movs	r2, #8
 8000608:	305c      	adds	r0, #92	; 0x5c
 800060a:	f000 f8b1 	bl	8000770 <memset>
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <std+0x38>)
 8000610:	6263      	str	r3, [r4, #36]	; 0x24
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <std+0x3c>)
 8000614:	62a3      	str	r3, [r4, #40]	; 0x28
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <std+0x40>)
 8000618:	62e3      	str	r3, [r4, #44]	; 0x2c
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <std+0x44>)
 800061c:	6224      	str	r4, [r4, #32]
 800061e:	6323      	str	r3, [r4, #48]	; 0x30
 8000620:	bd10      	pop	{r4, pc}
 8000622:	bf00      	nop
 8000624:	08001035 	.word	0x08001035
 8000628:	08001057 	.word	0x08001057
 800062c:	0800108f 	.word	0x0800108f
 8000630:	080010b3 	.word	0x080010b3

08000634 <stdio_exit_handler>:
 8000634:	4a02      	ldr	r2, [pc, #8]	; (8000640 <stdio_exit_handler+0xc>)
 8000636:	4903      	ldr	r1, [pc, #12]	; (8000644 <stdio_exit_handler+0x10>)
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <stdio_exit_handler+0x14>)
 800063a:	f000 b869 	b.w	8000710 <_fwalk_sglue>
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	08000fcd 	.word	0x08000fcd
 8000648:	2000000c 	.word	0x2000000c

0800064c <cleanup_stdio>:
 800064c:	6841      	ldr	r1, [r0, #4]
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <cleanup_stdio+0x34>)
 8000650:	4299      	cmp	r1, r3
 8000652:	b510      	push	{r4, lr}
 8000654:	4604      	mov	r4, r0
 8000656:	d001      	beq.n	800065c <cleanup_stdio+0x10>
 8000658:	f000 fcb8 	bl	8000fcc <_fflush_r>
 800065c:	68a1      	ldr	r1, [r4, #8]
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <cleanup_stdio+0x38>)
 8000660:	4299      	cmp	r1, r3
 8000662:	d002      	beq.n	800066a <cleanup_stdio+0x1e>
 8000664:	4620      	mov	r0, r4
 8000666:	f000 fcb1 	bl	8000fcc <_fflush_r>
 800066a:	68e1      	ldr	r1, [r4, #12]
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <cleanup_stdio+0x3c>)
 800066e:	4299      	cmp	r1, r3
 8000670:	d004      	beq.n	800067c <cleanup_stdio+0x30>
 8000672:	4620      	mov	r0, r4
 8000674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000678:	f000 bca8 	b.w	8000fcc <_fflush_r>
 800067c:	bd10      	pop	{r4, pc}
 800067e:	bf00      	nop
 8000680:	2000007c 	.word	0x2000007c
 8000684:	200000e4 	.word	0x200000e4
 8000688:	2000014c 	.word	0x2000014c

0800068c <global_stdio_init.part.0>:
 800068c:	b510      	push	{r4, lr}
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <global_stdio_init.part.0+0x30>)
 8000690:	4c0b      	ldr	r4, [pc, #44]	; (80006c0 <global_stdio_init.part.0+0x34>)
 8000692:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <global_stdio_init.part.0+0x38>)
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	4620      	mov	r0, r4
 8000698:	2200      	movs	r2, #0
 800069a:	2104      	movs	r1, #4
 800069c:	f7ff ffa6 	bl	80005ec <std>
 80006a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006a4:	2201      	movs	r2, #1
 80006a6:	2109      	movs	r1, #9
 80006a8:	f7ff ffa0 	bl	80005ec <std>
 80006ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006b0:	2202      	movs	r2, #2
 80006b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b6:	2112      	movs	r1, #18
 80006b8:	f7ff bf98 	b.w	80005ec <std>
 80006bc:	200001b4 	.word	0x200001b4
 80006c0:	2000007c 	.word	0x2000007c
 80006c4:	08000635 	.word	0x08000635

080006c8 <__sfp_lock_acquire>:
 80006c8:	4801      	ldr	r0, [pc, #4]	; (80006d0 <__sfp_lock_acquire+0x8>)
 80006ca:	f000 b883 	b.w	80007d4 <__retarget_lock_acquire_recursive>
 80006ce:	bf00      	nop
 80006d0:	200001b9 	.word	0x200001b9

080006d4 <__sfp_lock_release>:
 80006d4:	4801      	ldr	r0, [pc, #4]	; (80006dc <__sfp_lock_release+0x8>)
 80006d6:	f000 b87e 	b.w	80007d6 <__retarget_lock_release_recursive>
 80006da:	bf00      	nop
 80006dc:	200001b9 	.word	0x200001b9

080006e0 <__sinit>:
 80006e0:	b510      	push	{r4, lr}
 80006e2:	4604      	mov	r4, r0
 80006e4:	f7ff fff0 	bl	80006c8 <__sfp_lock_acquire>
 80006e8:	6a23      	ldr	r3, [r4, #32]
 80006ea:	b11b      	cbz	r3, 80006f4 <__sinit+0x14>
 80006ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f0:	f7ff bff0 	b.w	80006d4 <__sfp_lock_release>
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__sinit+0x28>)
 80006f6:	6223      	str	r3, [r4, #32]
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__sinit+0x2c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f5      	bne.n	80006ec <__sinit+0xc>
 8000700:	f7ff ffc4 	bl	800068c <global_stdio_init.part.0>
 8000704:	e7f2      	b.n	80006ec <__sinit+0xc>
 8000706:	bf00      	nop
 8000708:	0800064d 	.word	0x0800064d
 800070c:	200001b4 	.word	0x200001b4

08000710 <_fwalk_sglue>:
 8000710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000714:	4607      	mov	r7, r0
 8000716:	4688      	mov	r8, r1
 8000718:	4614      	mov	r4, r2
 800071a:	2600      	movs	r6, #0
 800071c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000720:	f1b9 0901 	subs.w	r9, r9, #1
 8000724:	d505      	bpl.n	8000732 <_fwalk_sglue+0x22>
 8000726:	6824      	ldr	r4, [r4, #0]
 8000728:	2c00      	cmp	r4, #0
 800072a:	d1f7      	bne.n	800071c <_fwalk_sglue+0xc>
 800072c:	4630      	mov	r0, r6
 800072e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000732:	89ab      	ldrh	r3, [r5, #12]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d907      	bls.n	8000748 <_fwalk_sglue+0x38>
 8000738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800073c:	3301      	adds	r3, #1
 800073e:	d003      	beq.n	8000748 <_fwalk_sglue+0x38>
 8000740:	4629      	mov	r1, r5
 8000742:	4638      	mov	r0, r7
 8000744:	47c0      	blx	r8
 8000746:	4306      	orrs	r6, r0
 8000748:	3568      	adds	r5, #104	; 0x68
 800074a:	e7e9      	b.n	8000720 <_fwalk_sglue+0x10>

0800074c <iprintf>:
 800074c:	b40f      	push	{r0, r1, r2, r3}
 800074e:	b507      	push	{r0, r1, r2, lr}
 8000750:	4906      	ldr	r1, [pc, #24]	; (800076c <iprintf+0x20>)
 8000752:	ab04      	add	r3, sp, #16
 8000754:	6808      	ldr	r0, [r1, #0]
 8000756:	f853 2b04 	ldr.w	r2, [r3], #4
 800075a:	6881      	ldr	r1, [r0, #8]
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	f000 f865 	bl	800082c <_vfiprintf_r>
 8000762:	b003      	add	sp, #12
 8000764:	f85d eb04 	ldr.w	lr, [sp], #4
 8000768:	b004      	add	sp, #16
 800076a:	4770      	bx	lr
 800076c:	20000058 	.word	0x20000058

08000770 <memset>:
 8000770:	4402      	add	r2, r0
 8000772:	4603      	mov	r3, r0
 8000774:	4293      	cmp	r3, r2
 8000776:	d100      	bne.n	800077a <memset+0xa>
 8000778:	4770      	bx	lr
 800077a:	f803 1b01 	strb.w	r1, [r3], #1
 800077e:	e7f9      	b.n	8000774 <memset+0x4>

08000780 <__errno>:
 8000780:	4b01      	ldr	r3, [pc, #4]	; (8000788 <__errno+0x8>)
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000058 	.word	0x20000058

0800078c <__libc_init_array>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	4d0d      	ldr	r5, [pc, #52]	; (80007c4 <__libc_init_array+0x38>)
 8000790:	4c0d      	ldr	r4, [pc, #52]	; (80007c8 <__libc_init_array+0x3c>)
 8000792:	1b64      	subs	r4, r4, r5
 8000794:	10a4      	asrs	r4, r4, #2
 8000796:	2600      	movs	r6, #0
 8000798:	42a6      	cmp	r6, r4
 800079a:	d109      	bne.n	80007b0 <__libc_init_array+0x24>
 800079c:	4d0b      	ldr	r5, [pc, #44]	; (80007cc <__libc_init_array+0x40>)
 800079e:	4c0c      	ldr	r4, [pc, #48]	; (80007d0 <__libc_init_array+0x44>)
 80007a0:	f000 fe46 	bl	8001430 <_init>
 80007a4:	1b64      	subs	r4, r4, r5
 80007a6:	10a4      	asrs	r4, r4, #2
 80007a8:	2600      	movs	r6, #0
 80007aa:	42a6      	cmp	r6, r4
 80007ac:	d105      	bne.n	80007ba <__libc_init_array+0x2e>
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b4:	4798      	blx	r3
 80007b6:	3601      	adds	r6, #1
 80007b8:	e7ee      	b.n	8000798 <__libc_init_array+0xc>
 80007ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80007be:	4798      	blx	r3
 80007c0:	3601      	adds	r6, #1
 80007c2:	e7f2      	b.n	80007aa <__libc_init_array+0x1e>
 80007c4:	08001494 	.word	0x08001494
 80007c8:	08001494 	.word	0x08001494
 80007cc:	08001494 	.word	0x08001494
 80007d0:	08001498 	.word	0x08001498

080007d4 <__retarget_lock_acquire_recursive>:
 80007d4:	4770      	bx	lr

080007d6 <__retarget_lock_release_recursive>:
 80007d6:	4770      	bx	lr

080007d8 <__sfputc_r>:
 80007d8:	6893      	ldr	r3, [r2, #8]
 80007da:	3b01      	subs	r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	b410      	push	{r4}
 80007e0:	6093      	str	r3, [r2, #8]
 80007e2:	da08      	bge.n	80007f6 <__sfputc_r+0x1e>
 80007e4:	6994      	ldr	r4, [r2, #24]
 80007e6:	42a3      	cmp	r3, r4
 80007e8:	db01      	blt.n	80007ee <__sfputc_r+0x16>
 80007ea:	290a      	cmp	r1, #10
 80007ec:	d103      	bne.n	80007f6 <__sfputc_r+0x1e>
 80007ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007f2:	f000 bc62 	b.w	80010ba <__swbuf_r>
 80007f6:	6813      	ldr	r3, [r2, #0]
 80007f8:	1c58      	adds	r0, r3, #1
 80007fa:	6010      	str	r0, [r2, #0]
 80007fc:	7019      	strb	r1, [r3, #0]
 80007fe:	4608      	mov	r0, r1
 8000800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000804:	4770      	bx	lr

08000806 <__sfputs_r>:
 8000806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000808:	4606      	mov	r6, r0
 800080a:	460f      	mov	r7, r1
 800080c:	4614      	mov	r4, r2
 800080e:	18d5      	adds	r5, r2, r3
 8000810:	42ac      	cmp	r4, r5
 8000812:	d101      	bne.n	8000818 <__sfputs_r+0x12>
 8000814:	2000      	movs	r0, #0
 8000816:	e007      	b.n	8000828 <__sfputs_r+0x22>
 8000818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800081c:	463a      	mov	r2, r7
 800081e:	4630      	mov	r0, r6
 8000820:	f7ff ffda 	bl	80007d8 <__sfputc_r>
 8000824:	1c43      	adds	r3, r0, #1
 8000826:	d1f3      	bne.n	8000810 <__sfputs_r+0xa>
 8000828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800082c <_vfiprintf_r>:
 800082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000830:	460d      	mov	r5, r1
 8000832:	b09d      	sub	sp, #116	; 0x74
 8000834:	4614      	mov	r4, r2
 8000836:	4698      	mov	r8, r3
 8000838:	4606      	mov	r6, r0
 800083a:	b118      	cbz	r0, 8000844 <_vfiprintf_r+0x18>
 800083c:	6a03      	ldr	r3, [r0, #32]
 800083e:	b90b      	cbnz	r3, 8000844 <_vfiprintf_r+0x18>
 8000840:	f7ff ff4e 	bl	80006e0 <__sinit>
 8000844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000846:	07d9      	lsls	r1, r3, #31
 8000848:	d405      	bmi.n	8000856 <_vfiprintf_r+0x2a>
 800084a:	89ab      	ldrh	r3, [r5, #12]
 800084c:	059a      	lsls	r2, r3, #22
 800084e:	d402      	bmi.n	8000856 <_vfiprintf_r+0x2a>
 8000850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000852:	f7ff ffbf 	bl	80007d4 <__retarget_lock_acquire_recursive>
 8000856:	89ab      	ldrh	r3, [r5, #12]
 8000858:	071b      	lsls	r3, r3, #28
 800085a:	d501      	bpl.n	8000860 <_vfiprintf_r+0x34>
 800085c:	692b      	ldr	r3, [r5, #16]
 800085e:	b99b      	cbnz	r3, 8000888 <_vfiprintf_r+0x5c>
 8000860:	4629      	mov	r1, r5
 8000862:	4630      	mov	r0, r6
 8000864:	f000 fc66 	bl	8001134 <__swsetup_r>
 8000868:	b170      	cbz	r0, 8000888 <_vfiprintf_r+0x5c>
 800086a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800086c:	07dc      	lsls	r4, r3, #31
 800086e:	d504      	bpl.n	800087a <_vfiprintf_r+0x4e>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	b01d      	add	sp, #116	; 0x74
 8000876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800087a:	89ab      	ldrh	r3, [r5, #12]
 800087c:	0598      	lsls	r0, r3, #22
 800087e:	d4f7      	bmi.n	8000870 <_vfiprintf_r+0x44>
 8000880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000882:	f7ff ffa8 	bl	80007d6 <__retarget_lock_release_recursive>
 8000886:	e7f3      	b.n	8000870 <_vfiprintf_r+0x44>
 8000888:	2300      	movs	r3, #0
 800088a:	9309      	str	r3, [sp, #36]	; 0x24
 800088c:	2320      	movs	r3, #32
 800088e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000892:	f8cd 800c 	str.w	r8, [sp, #12]
 8000896:	2330      	movs	r3, #48	; 0x30
 8000898:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000a4c <_vfiprintf_r+0x220>
 800089c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80008a0:	f04f 0901 	mov.w	r9, #1
 80008a4:	4623      	mov	r3, r4
 80008a6:	469a      	mov	sl, r3
 80008a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008ac:	b10a      	cbz	r2, 80008b2 <_vfiprintf_r+0x86>
 80008ae:	2a25      	cmp	r2, #37	; 0x25
 80008b0:	d1f9      	bne.n	80008a6 <_vfiprintf_r+0x7a>
 80008b2:	ebba 0b04 	subs.w	fp, sl, r4
 80008b6:	d00b      	beq.n	80008d0 <_vfiprintf_r+0xa4>
 80008b8:	465b      	mov	r3, fp
 80008ba:	4622      	mov	r2, r4
 80008bc:	4629      	mov	r1, r5
 80008be:	4630      	mov	r0, r6
 80008c0:	f7ff ffa1 	bl	8000806 <__sfputs_r>
 80008c4:	3001      	adds	r0, #1
 80008c6:	f000 80a9 	beq.w	8000a1c <_vfiprintf_r+0x1f0>
 80008ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80008cc:	445a      	add	r2, fp
 80008ce:	9209      	str	r2, [sp, #36]	; 0x24
 80008d0:	f89a 3000 	ldrb.w	r3, [sl]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f000 80a1 	beq.w	8000a1c <_vfiprintf_r+0x1f0>
 80008da:	2300      	movs	r3, #0
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80008e4:	f10a 0a01 	add.w	sl, sl, #1
 80008e8:	9304      	str	r3, [sp, #16]
 80008ea:	9307      	str	r3, [sp, #28]
 80008ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80008f0:	931a      	str	r3, [sp, #104]	; 0x68
 80008f2:	4654      	mov	r4, sl
 80008f4:	2205      	movs	r2, #5
 80008f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008fa:	4854      	ldr	r0, [pc, #336]	; (8000a4c <_vfiprintf_r+0x220>)
 80008fc:	f7ff fc70 	bl	80001e0 <memchr>
 8000900:	9a04      	ldr	r2, [sp, #16]
 8000902:	b9d8      	cbnz	r0, 800093c <_vfiprintf_r+0x110>
 8000904:	06d1      	lsls	r1, r2, #27
 8000906:	bf44      	itt	mi
 8000908:	2320      	movmi	r3, #32
 800090a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800090e:	0713      	lsls	r3, r2, #28
 8000910:	bf44      	itt	mi
 8000912:	232b      	movmi	r3, #43	; 0x2b
 8000914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000918:	f89a 3000 	ldrb.w	r3, [sl]
 800091c:	2b2a      	cmp	r3, #42	; 0x2a
 800091e:	d015      	beq.n	800094c <_vfiprintf_r+0x120>
 8000920:	9a07      	ldr	r2, [sp, #28]
 8000922:	4654      	mov	r4, sl
 8000924:	2000      	movs	r0, #0
 8000926:	f04f 0c0a 	mov.w	ip, #10
 800092a:	4621      	mov	r1, r4
 800092c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000930:	3b30      	subs	r3, #48	; 0x30
 8000932:	2b09      	cmp	r3, #9
 8000934:	d94d      	bls.n	80009d2 <_vfiprintf_r+0x1a6>
 8000936:	b1b0      	cbz	r0, 8000966 <_vfiprintf_r+0x13a>
 8000938:	9207      	str	r2, [sp, #28]
 800093a:	e014      	b.n	8000966 <_vfiprintf_r+0x13a>
 800093c:	eba0 0308 	sub.w	r3, r0, r8
 8000940:	fa09 f303 	lsl.w	r3, r9, r3
 8000944:	4313      	orrs	r3, r2
 8000946:	9304      	str	r3, [sp, #16]
 8000948:	46a2      	mov	sl, r4
 800094a:	e7d2      	b.n	80008f2 <_vfiprintf_r+0xc6>
 800094c:	9b03      	ldr	r3, [sp, #12]
 800094e:	1d19      	adds	r1, r3, #4
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	9103      	str	r1, [sp, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	bfbb      	ittet	lt
 8000958:	425b      	neglt	r3, r3
 800095a:	f042 0202 	orrlt.w	r2, r2, #2
 800095e:	9307      	strge	r3, [sp, #28]
 8000960:	9307      	strlt	r3, [sp, #28]
 8000962:	bfb8      	it	lt
 8000964:	9204      	strlt	r2, [sp, #16]
 8000966:	7823      	ldrb	r3, [r4, #0]
 8000968:	2b2e      	cmp	r3, #46	; 0x2e
 800096a:	d10c      	bne.n	8000986 <_vfiprintf_r+0x15a>
 800096c:	7863      	ldrb	r3, [r4, #1]
 800096e:	2b2a      	cmp	r3, #42	; 0x2a
 8000970:	d134      	bne.n	80009dc <_vfiprintf_r+0x1b0>
 8000972:	9b03      	ldr	r3, [sp, #12]
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	9203      	str	r2, [sp, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	bfb8      	it	lt
 800097e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000982:	3402      	adds	r4, #2
 8000984:	9305      	str	r3, [sp, #20]
 8000986:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000a5c <_vfiprintf_r+0x230>
 800098a:	7821      	ldrb	r1, [r4, #0]
 800098c:	2203      	movs	r2, #3
 800098e:	4650      	mov	r0, sl
 8000990:	f7ff fc26 	bl	80001e0 <memchr>
 8000994:	b138      	cbz	r0, 80009a6 <_vfiprintf_r+0x17a>
 8000996:	9b04      	ldr	r3, [sp, #16]
 8000998:	eba0 000a 	sub.w	r0, r0, sl
 800099c:	2240      	movs	r2, #64	; 0x40
 800099e:	4082      	lsls	r2, r0
 80009a0:	4313      	orrs	r3, r2
 80009a2:	3401      	adds	r4, #1
 80009a4:	9304      	str	r3, [sp, #16]
 80009a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009aa:	4829      	ldr	r0, [pc, #164]	; (8000a50 <_vfiprintf_r+0x224>)
 80009ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80009b0:	2206      	movs	r2, #6
 80009b2:	f7ff fc15 	bl	80001e0 <memchr>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d03f      	beq.n	8000a3a <_vfiprintf_r+0x20e>
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <_vfiprintf_r+0x228>)
 80009bc:	bb1b      	cbnz	r3, 8000a06 <_vfiprintf_r+0x1da>
 80009be:	9b03      	ldr	r3, [sp, #12]
 80009c0:	3307      	adds	r3, #7
 80009c2:	f023 0307 	bic.w	r3, r3, #7
 80009c6:	3308      	adds	r3, #8
 80009c8:	9303      	str	r3, [sp, #12]
 80009ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009cc:	443b      	add	r3, r7
 80009ce:	9309      	str	r3, [sp, #36]	; 0x24
 80009d0:	e768      	b.n	80008a4 <_vfiprintf_r+0x78>
 80009d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80009d6:	460c      	mov	r4, r1
 80009d8:	2001      	movs	r0, #1
 80009da:	e7a6      	b.n	800092a <_vfiprintf_r+0xfe>
 80009dc:	2300      	movs	r3, #0
 80009de:	3401      	adds	r4, #1
 80009e0:	9305      	str	r3, [sp, #20]
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 0c0a 	mov.w	ip, #10
 80009e8:	4620      	mov	r0, r4
 80009ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009ee:	3a30      	subs	r2, #48	; 0x30
 80009f0:	2a09      	cmp	r2, #9
 80009f2:	d903      	bls.n	80009fc <_vfiprintf_r+0x1d0>
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0c6      	beq.n	8000986 <_vfiprintf_r+0x15a>
 80009f8:	9105      	str	r1, [sp, #20]
 80009fa:	e7c4      	b.n	8000986 <_vfiprintf_r+0x15a>
 80009fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a00:	4604      	mov	r4, r0
 8000a02:	2301      	movs	r3, #1
 8000a04:	e7f0      	b.n	80009e8 <_vfiprintf_r+0x1bc>
 8000a06:	ab03      	add	r3, sp, #12
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	462a      	mov	r2, r5
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <_vfiprintf_r+0x22c>)
 8000a0e:	a904      	add	r1, sp, #16
 8000a10:	4630      	mov	r0, r6
 8000a12:	f3af 8000 	nop.w
 8000a16:	4607      	mov	r7, r0
 8000a18:	1c78      	adds	r0, r7, #1
 8000a1a:	d1d6      	bne.n	80009ca <_vfiprintf_r+0x19e>
 8000a1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a1e:	07d9      	lsls	r1, r3, #31
 8000a20:	d405      	bmi.n	8000a2e <_vfiprintf_r+0x202>
 8000a22:	89ab      	ldrh	r3, [r5, #12]
 8000a24:	059a      	lsls	r2, r3, #22
 8000a26:	d402      	bmi.n	8000a2e <_vfiprintf_r+0x202>
 8000a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a2a:	f7ff fed4 	bl	80007d6 <__retarget_lock_release_recursive>
 8000a2e:	89ab      	ldrh	r3, [r5, #12]
 8000a30:	065b      	lsls	r3, r3, #25
 8000a32:	f53f af1d 	bmi.w	8000870 <_vfiprintf_r+0x44>
 8000a36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000a38:	e71c      	b.n	8000874 <_vfiprintf_r+0x48>
 8000a3a:	ab03      	add	r3, sp, #12
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	462a      	mov	r2, r5
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <_vfiprintf_r+0x22c>)
 8000a42:	a904      	add	r1, sp, #16
 8000a44:	4630      	mov	r0, r6
 8000a46:	f000 f919 	bl	8000c7c <_printf_i>
 8000a4a:	e7e4      	b.n	8000a16 <_vfiprintf_r+0x1ea>
 8000a4c:	0800145e 	.word	0x0800145e
 8000a50:	08001468 	.word	0x08001468
 8000a54:	00000000 	.word	0x00000000
 8000a58:	08000807 	.word	0x08000807
 8000a5c:	08001464 	.word	0x08001464

08000a60 <sbrk_aligned>:
 8000a60:	b570      	push	{r4, r5, r6, lr}
 8000a62:	4e0e      	ldr	r6, [pc, #56]	; (8000a9c <sbrk_aligned+0x3c>)
 8000a64:	460c      	mov	r4, r1
 8000a66:	6831      	ldr	r1, [r6, #0]
 8000a68:	4605      	mov	r5, r0
 8000a6a:	b911      	cbnz	r1, 8000a72 <sbrk_aligned+0x12>
 8000a6c:	f000 fc72 	bl	8001354 <_sbrk_r>
 8000a70:	6030      	str	r0, [r6, #0]
 8000a72:	4621      	mov	r1, r4
 8000a74:	4628      	mov	r0, r5
 8000a76:	f000 fc6d 	bl	8001354 <_sbrk_r>
 8000a7a:	1c43      	adds	r3, r0, #1
 8000a7c:	d00a      	beq.n	8000a94 <sbrk_aligned+0x34>
 8000a7e:	1cc4      	adds	r4, r0, #3
 8000a80:	f024 0403 	bic.w	r4, r4, #3
 8000a84:	42a0      	cmp	r0, r4
 8000a86:	d007      	beq.n	8000a98 <sbrk_aligned+0x38>
 8000a88:	1a21      	subs	r1, r4, r0
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 fc62 	bl	8001354 <_sbrk_r>
 8000a90:	3001      	adds	r0, #1
 8000a92:	d101      	bne.n	8000a98 <sbrk_aligned+0x38>
 8000a94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a98:	4620      	mov	r0, r4
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}
 8000a9c:	200001c0 	.word	0x200001c0

08000aa0 <_malloc_r>:
 8000aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa4:	1ccd      	adds	r5, r1, #3
 8000aa6:	f025 0503 	bic.w	r5, r5, #3
 8000aaa:	3508      	adds	r5, #8
 8000aac:	2d0c      	cmp	r5, #12
 8000aae:	bf38      	it	cc
 8000ab0:	250c      	movcc	r5, #12
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	4607      	mov	r7, r0
 8000ab6:	db01      	blt.n	8000abc <_malloc_r+0x1c>
 8000ab8:	42a9      	cmp	r1, r5
 8000aba:	d905      	bls.n	8000ac8 <_malloc_r+0x28>
 8000abc:	230c      	movs	r3, #12
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	4630      	mov	r0, r6
 8000ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ac8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b9c <_malloc_r+0xfc>
 8000acc:	f000 faa6 	bl	800101c <__malloc_lock>
 8000ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ad4:	461c      	mov	r4, r3
 8000ad6:	bb5c      	cbnz	r4, 8000b30 <_malloc_r+0x90>
 8000ad8:	4629      	mov	r1, r5
 8000ada:	4638      	mov	r0, r7
 8000adc:	f7ff ffc0 	bl	8000a60 <sbrk_aligned>
 8000ae0:	1c43      	adds	r3, r0, #1
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	d155      	bne.n	8000b92 <_malloc_r+0xf2>
 8000ae6:	f8d8 4000 	ldr.w	r4, [r8]
 8000aea:	4626      	mov	r6, r4
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d145      	bne.n	8000b7c <_malloc_r+0xdc>
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d048      	beq.n	8000b86 <_malloc_r+0xe6>
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	4631      	mov	r1, r6
 8000af8:	4638      	mov	r0, r7
 8000afa:	eb04 0903 	add.w	r9, r4, r3
 8000afe:	f000 fc29 	bl	8001354 <_sbrk_r>
 8000b02:	4581      	cmp	r9, r0
 8000b04:	d13f      	bne.n	8000b86 <_malloc_r+0xe6>
 8000b06:	6821      	ldr	r1, [r4, #0]
 8000b08:	1a6d      	subs	r5, r5, r1
 8000b0a:	4629      	mov	r1, r5
 8000b0c:	4638      	mov	r0, r7
 8000b0e:	f7ff ffa7 	bl	8000a60 <sbrk_aligned>
 8000b12:	3001      	adds	r0, #1
 8000b14:	d037      	beq.n	8000b86 <_malloc_r+0xe6>
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	442b      	add	r3, r5
 8000b1a:	6023      	str	r3, [r4, #0]
 8000b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d038      	beq.n	8000b96 <_malloc_r+0xf6>
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	42a2      	cmp	r2, r4
 8000b28:	d12b      	bne.n	8000b82 <_malloc_r+0xe2>
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	e00f      	b.n	8000b50 <_malloc_r+0xb0>
 8000b30:	6822      	ldr	r2, [r4, #0]
 8000b32:	1b52      	subs	r2, r2, r5
 8000b34:	d41f      	bmi.n	8000b76 <_malloc_r+0xd6>
 8000b36:	2a0b      	cmp	r2, #11
 8000b38:	d917      	bls.n	8000b6a <_malloc_r+0xca>
 8000b3a:	1961      	adds	r1, r4, r5
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	6025      	str	r5, [r4, #0]
 8000b40:	bf18      	it	ne
 8000b42:	6059      	strne	r1, [r3, #4]
 8000b44:	6863      	ldr	r3, [r4, #4]
 8000b46:	bf08      	it	eq
 8000b48:	f8c8 1000 	streq.w	r1, [r8]
 8000b4c:	5162      	str	r2, [r4, r5]
 8000b4e:	604b      	str	r3, [r1, #4]
 8000b50:	4638      	mov	r0, r7
 8000b52:	f104 060b 	add.w	r6, r4, #11
 8000b56:	f000 fa67 	bl	8001028 <__malloc_unlock>
 8000b5a:	f026 0607 	bic.w	r6, r6, #7
 8000b5e:	1d23      	adds	r3, r4, #4
 8000b60:	1af2      	subs	r2, r6, r3
 8000b62:	d0ae      	beq.n	8000ac2 <_malloc_r+0x22>
 8000b64:	1b9b      	subs	r3, r3, r6
 8000b66:	50a3      	str	r3, [r4, r2]
 8000b68:	e7ab      	b.n	8000ac2 <_malloc_r+0x22>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	6862      	ldr	r2, [r4, #4]
 8000b6e:	d1dd      	bne.n	8000b2c <_malloc_r+0x8c>
 8000b70:	f8c8 2000 	str.w	r2, [r8]
 8000b74:	e7ec      	b.n	8000b50 <_malloc_r+0xb0>
 8000b76:	4623      	mov	r3, r4
 8000b78:	6864      	ldr	r4, [r4, #4]
 8000b7a:	e7ac      	b.n	8000ad6 <_malloc_r+0x36>
 8000b7c:	4634      	mov	r4, r6
 8000b7e:	6876      	ldr	r6, [r6, #4]
 8000b80:	e7b4      	b.n	8000aec <_malloc_r+0x4c>
 8000b82:	4613      	mov	r3, r2
 8000b84:	e7cc      	b.n	8000b20 <_malloc_r+0x80>
 8000b86:	230c      	movs	r3, #12
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f000 fa4c 	bl	8001028 <__malloc_unlock>
 8000b90:	e797      	b.n	8000ac2 <_malloc_r+0x22>
 8000b92:	6025      	str	r5, [r4, #0]
 8000b94:	e7dc      	b.n	8000b50 <_malloc_r+0xb0>
 8000b96:	605b      	str	r3, [r3, #4]
 8000b98:	deff      	udf	#255	; 0xff
 8000b9a:	bf00      	nop
 8000b9c:	200001bc 	.word	0x200001bc

08000ba0 <_printf_common>:
 8000ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba4:	4616      	mov	r6, r2
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	688a      	ldr	r2, [r1, #8]
 8000baa:	690b      	ldr	r3, [r1, #16]
 8000bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	bfb8      	it	lt
 8000bb4:	4613      	movlt	r3, r2
 8000bb6:	6033      	str	r3, [r6, #0]
 8000bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000bbc:	4607      	mov	r7, r0
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	b10a      	cbz	r2, 8000bc6 <_printf_common+0x26>
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	6033      	str	r3, [r6, #0]
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	0699      	lsls	r1, r3, #26
 8000bca:	bf42      	ittt	mi
 8000bcc:	6833      	ldrmi	r3, [r6, #0]
 8000bce:	3302      	addmi	r3, #2
 8000bd0:	6033      	strmi	r3, [r6, #0]
 8000bd2:	6825      	ldr	r5, [r4, #0]
 8000bd4:	f015 0506 	ands.w	r5, r5, #6
 8000bd8:	d106      	bne.n	8000be8 <_printf_common+0x48>
 8000bda:	f104 0a19 	add.w	sl, r4, #25
 8000bde:	68e3      	ldr	r3, [r4, #12]
 8000be0:	6832      	ldr	r2, [r6, #0]
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	dc26      	bgt.n	8000c36 <_printf_common+0x96>
 8000be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000bec:	1e13      	subs	r3, r2, #0
 8000bee:	6822      	ldr	r2, [r4, #0]
 8000bf0:	bf18      	it	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	0692      	lsls	r2, r2, #26
 8000bf6:	d42b      	bmi.n	8000c50 <_printf_common+0xb0>
 8000bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000bfc:	4649      	mov	r1, r9
 8000bfe:	4638      	mov	r0, r7
 8000c00:	47c0      	blx	r8
 8000c02:	3001      	adds	r0, #1
 8000c04:	d01e      	beq.n	8000c44 <_printf_common+0xa4>
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	6922      	ldr	r2, [r4, #16]
 8000c0a:	f003 0306 	and.w	r3, r3, #6
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf02      	ittt	eq
 8000c12:	68e5      	ldreq	r5, [r4, #12]
 8000c14:	6833      	ldreq	r3, [r6, #0]
 8000c16:	1aed      	subeq	r5, r5, r3
 8000c18:	68a3      	ldr	r3, [r4, #8]
 8000c1a:	bf0c      	ite	eq
 8000c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c20:	2500      	movne	r5, #0
 8000c22:	4293      	cmp	r3, r2
 8000c24:	bfc4      	itt	gt
 8000c26:	1a9b      	subgt	r3, r3, r2
 8000c28:	18ed      	addgt	r5, r5, r3
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	341a      	adds	r4, #26
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d11a      	bne.n	8000c68 <_printf_common+0xc8>
 8000c32:	2000      	movs	r0, #0
 8000c34:	e008      	b.n	8000c48 <_printf_common+0xa8>
 8000c36:	2301      	movs	r3, #1
 8000c38:	4652      	mov	r2, sl
 8000c3a:	4649      	mov	r1, r9
 8000c3c:	4638      	mov	r0, r7
 8000c3e:	47c0      	blx	r8
 8000c40:	3001      	adds	r0, #1
 8000c42:	d103      	bne.n	8000c4c <_printf_common+0xac>
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	3501      	adds	r5, #1
 8000c4e:	e7c6      	b.n	8000bde <_printf_common+0x3e>
 8000c50:	18e1      	adds	r1, r4, r3
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	2030      	movs	r0, #48	; 0x30
 8000c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c5a:	4422      	add	r2, r4
 8000c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c64:	3302      	adds	r3, #2
 8000c66:	e7c7      	b.n	8000bf8 <_printf_common+0x58>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	4622      	mov	r2, r4
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	4638      	mov	r0, r7
 8000c70:	47c0      	blx	r8
 8000c72:	3001      	adds	r0, #1
 8000c74:	d0e6      	beq.n	8000c44 <_printf_common+0xa4>
 8000c76:	3601      	adds	r6, #1
 8000c78:	e7d9      	b.n	8000c2e <_printf_common+0x8e>
	...

08000c7c <_printf_i>:
 8000c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	7e0f      	ldrb	r7, [r1, #24]
 8000c82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c84:	2f78      	cmp	r7, #120	; 0x78
 8000c86:	4691      	mov	r9, r2
 8000c88:	4680      	mov	r8, r0
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	469a      	mov	sl, r3
 8000c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c92:	d807      	bhi.n	8000ca4 <_printf_i+0x28>
 8000c94:	2f62      	cmp	r7, #98	; 0x62
 8000c96:	d80a      	bhi.n	8000cae <_printf_i+0x32>
 8000c98:	2f00      	cmp	r7, #0
 8000c9a:	f000 80d4 	beq.w	8000e46 <_printf_i+0x1ca>
 8000c9e:	2f58      	cmp	r7, #88	; 0x58
 8000ca0:	f000 80c0 	beq.w	8000e24 <_printf_i+0x1a8>
 8000ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000cac:	e03a      	b.n	8000d24 <_printf_i+0xa8>
 8000cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000cb2:	2b15      	cmp	r3, #21
 8000cb4:	d8f6      	bhi.n	8000ca4 <_printf_i+0x28>
 8000cb6:	a101      	add	r1, pc, #4	; (adr r1, 8000cbc <_printf_i+0x40>)
 8000cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cbc:	08000d15 	.word	0x08000d15
 8000cc0:	08000d29 	.word	0x08000d29
 8000cc4:	08000ca5 	.word	0x08000ca5
 8000cc8:	08000ca5 	.word	0x08000ca5
 8000ccc:	08000ca5 	.word	0x08000ca5
 8000cd0:	08000ca5 	.word	0x08000ca5
 8000cd4:	08000d29 	.word	0x08000d29
 8000cd8:	08000ca5 	.word	0x08000ca5
 8000cdc:	08000ca5 	.word	0x08000ca5
 8000ce0:	08000ca5 	.word	0x08000ca5
 8000ce4:	08000ca5 	.word	0x08000ca5
 8000ce8:	08000e2d 	.word	0x08000e2d
 8000cec:	08000d55 	.word	0x08000d55
 8000cf0:	08000de7 	.word	0x08000de7
 8000cf4:	08000ca5 	.word	0x08000ca5
 8000cf8:	08000ca5 	.word	0x08000ca5
 8000cfc:	08000e4f 	.word	0x08000e4f
 8000d00:	08000ca5 	.word	0x08000ca5
 8000d04:	08000d55 	.word	0x08000d55
 8000d08:	08000ca5 	.word	0x08000ca5
 8000d0c:	08000ca5 	.word	0x08000ca5
 8000d10:	08000def 	.word	0x08000def
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	1d1a      	adds	r2, r3, #4
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	602a      	str	r2, [r5, #0]
 8000d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000d24:	2301      	movs	r3, #1
 8000d26:	e09f      	b.n	8000e68 <_printf_i+0x1ec>
 8000d28:	6820      	ldr	r0, [r4, #0]
 8000d2a:	682b      	ldr	r3, [r5, #0]
 8000d2c:	0607      	lsls	r7, r0, #24
 8000d2e:	f103 0104 	add.w	r1, r3, #4
 8000d32:	6029      	str	r1, [r5, #0]
 8000d34:	d501      	bpl.n	8000d3a <_printf_i+0xbe>
 8000d36:	681e      	ldr	r6, [r3, #0]
 8000d38:	e003      	b.n	8000d42 <_printf_i+0xc6>
 8000d3a:	0646      	lsls	r6, r0, #25
 8000d3c:	d5fb      	bpl.n	8000d36 <_printf_i+0xba>
 8000d3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	da03      	bge.n	8000d4e <_printf_i+0xd2>
 8000d46:	232d      	movs	r3, #45	; 0x2d
 8000d48:	4276      	negs	r6, r6
 8000d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000d4e:	485a      	ldr	r0, [pc, #360]	; (8000eb8 <_printf_i+0x23c>)
 8000d50:	230a      	movs	r3, #10
 8000d52:	e012      	b.n	8000d7a <_printf_i+0xfe>
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	6820      	ldr	r0, [r4, #0]
 8000d58:	1d19      	adds	r1, r3, #4
 8000d5a:	6029      	str	r1, [r5, #0]
 8000d5c:	0605      	lsls	r5, r0, #24
 8000d5e:	d501      	bpl.n	8000d64 <_printf_i+0xe8>
 8000d60:	681e      	ldr	r6, [r3, #0]
 8000d62:	e002      	b.n	8000d6a <_printf_i+0xee>
 8000d64:	0641      	lsls	r1, r0, #25
 8000d66:	d5fb      	bpl.n	8000d60 <_printf_i+0xe4>
 8000d68:	881e      	ldrh	r6, [r3, #0]
 8000d6a:	4853      	ldr	r0, [pc, #332]	; (8000eb8 <_printf_i+0x23c>)
 8000d6c:	2f6f      	cmp	r7, #111	; 0x6f
 8000d6e:	bf0c      	ite	eq
 8000d70:	2308      	moveq	r3, #8
 8000d72:	230a      	movne	r3, #10
 8000d74:	2100      	movs	r1, #0
 8000d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d7a:	6865      	ldr	r5, [r4, #4]
 8000d7c:	60a5      	str	r5, [r4, #8]
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	bfa2      	ittt	ge
 8000d82:	6821      	ldrge	r1, [r4, #0]
 8000d84:	f021 0104 	bicge.w	r1, r1, #4
 8000d88:	6021      	strge	r1, [r4, #0]
 8000d8a:	b90e      	cbnz	r6, 8000d90 <_printf_i+0x114>
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d04b      	beq.n	8000e28 <_printf_i+0x1ac>
 8000d90:	4615      	mov	r5, r2
 8000d92:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d96:	fb03 6711 	mls	r7, r3, r1, r6
 8000d9a:	5dc7      	ldrb	r7, [r0, r7]
 8000d9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000da0:	4637      	mov	r7, r6
 8000da2:	42bb      	cmp	r3, r7
 8000da4:	460e      	mov	r6, r1
 8000da6:	d9f4      	bls.n	8000d92 <_printf_i+0x116>
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d10b      	bne.n	8000dc4 <_printf_i+0x148>
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	07de      	lsls	r6, r3, #31
 8000db0:	d508      	bpl.n	8000dc4 <_printf_i+0x148>
 8000db2:	6923      	ldr	r3, [r4, #16]
 8000db4:	6861      	ldr	r1, [r4, #4]
 8000db6:	4299      	cmp	r1, r3
 8000db8:	bfde      	ittt	le
 8000dba:	2330      	movle	r3, #48	; 0x30
 8000dbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000dc0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000dc4:	1b52      	subs	r2, r2, r5
 8000dc6:	6122      	str	r2, [r4, #16]
 8000dc8:	f8cd a000 	str.w	sl, [sp]
 8000dcc:	464b      	mov	r3, r9
 8000dce:	aa03      	add	r2, sp, #12
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	f7ff fee4 	bl	8000ba0 <_printf_common>
 8000dd8:	3001      	adds	r0, #1
 8000dda:	d14a      	bne.n	8000e72 <_printf_i+0x1f6>
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de0:	b004      	add	sp, #16
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	f043 0320 	orr.w	r3, r3, #32
 8000dec:	6023      	str	r3, [r4, #0]
 8000dee:	4833      	ldr	r0, [pc, #204]	; (8000ebc <_printf_i+0x240>)
 8000df0:	2778      	movs	r7, #120	; 0x78
 8000df2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	6829      	ldr	r1, [r5, #0]
 8000dfa:	061f      	lsls	r7, r3, #24
 8000dfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e00:	d402      	bmi.n	8000e08 <_printf_i+0x18c>
 8000e02:	065f      	lsls	r7, r3, #25
 8000e04:	bf48      	it	mi
 8000e06:	b2b6      	uxthmi	r6, r6
 8000e08:	07df      	lsls	r7, r3, #31
 8000e0a:	bf48      	it	mi
 8000e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8000e10:	6029      	str	r1, [r5, #0]
 8000e12:	bf48      	it	mi
 8000e14:	6023      	strmi	r3, [r4, #0]
 8000e16:	b91e      	cbnz	r6, 8000e20 <_printf_i+0x1a4>
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	f023 0320 	bic.w	r3, r3, #32
 8000e1e:	6023      	str	r3, [r4, #0]
 8000e20:	2310      	movs	r3, #16
 8000e22:	e7a7      	b.n	8000d74 <_printf_i+0xf8>
 8000e24:	4824      	ldr	r0, [pc, #144]	; (8000eb8 <_printf_i+0x23c>)
 8000e26:	e7e4      	b.n	8000df2 <_printf_i+0x176>
 8000e28:	4615      	mov	r5, r2
 8000e2a:	e7bd      	b.n	8000da8 <_printf_i+0x12c>
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	6826      	ldr	r6, [r4, #0]
 8000e30:	6961      	ldr	r1, [r4, #20]
 8000e32:	1d18      	adds	r0, r3, #4
 8000e34:	6028      	str	r0, [r5, #0]
 8000e36:	0635      	lsls	r5, r6, #24
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	d501      	bpl.n	8000e40 <_printf_i+0x1c4>
 8000e3c:	6019      	str	r1, [r3, #0]
 8000e3e:	e002      	b.n	8000e46 <_printf_i+0x1ca>
 8000e40:	0670      	lsls	r0, r6, #25
 8000e42:	d5fb      	bpl.n	8000e3c <_printf_i+0x1c0>
 8000e44:	8019      	strh	r1, [r3, #0]
 8000e46:	2300      	movs	r3, #0
 8000e48:	6123      	str	r3, [r4, #16]
 8000e4a:	4615      	mov	r5, r2
 8000e4c:	e7bc      	b.n	8000dc8 <_printf_i+0x14c>
 8000e4e:	682b      	ldr	r3, [r5, #0]
 8000e50:	1d1a      	adds	r2, r3, #4
 8000e52:	602a      	str	r2, [r5, #0]
 8000e54:	681d      	ldr	r5, [r3, #0]
 8000e56:	6862      	ldr	r2, [r4, #4]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4628      	mov	r0, r5
 8000e5c:	f7ff f9c0 	bl	80001e0 <memchr>
 8000e60:	b108      	cbz	r0, 8000e66 <_printf_i+0x1ea>
 8000e62:	1b40      	subs	r0, r0, r5
 8000e64:	6060      	str	r0, [r4, #4]
 8000e66:	6863      	ldr	r3, [r4, #4]
 8000e68:	6123      	str	r3, [r4, #16]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e70:	e7aa      	b.n	8000dc8 <_printf_i+0x14c>
 8000e72:	6923      	ldr	r3, [r4, #16]
 8000e74:	462a      	mov	r2, r5
 8000e76:	4649      	mov	r1, r9
 8000e78:	4640      	mov	r0, r8
 8000e7a:	47d0      	blx	sl
 8000e7c:	3001      	adds	r0, #1
 8000e7e:	d0ad      	beq.n	8000ddc <_printf_i+0x160>
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	079b      	lsls	r3, r3, #30
 8000e84:	d413      	bmi.n	8000eae <_printf_i+0x232>
 8000e86:	68e0      	ldr	r0, [r4, #12]
 8000e88:	9b03      	ldr	r3, [sp, #12]
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	bfb8      	it	lt
 8000e8e:	4618      	movlt	r0, r3
 8000e90:	e7a6      	b.n	8000de0 <_printf_i+0x164>
 8000e92:	2301      	movs	r3, #1
 8000e94:	4632      	mov	r2, r6
 8000e96:	4649      	mov	r1, r9
 8000e98:	4640      	mov	r0, r8
 8000e9a:	47d0      	blx	sl
 8000e9c:	3001      	adds	r0, #1
 8000e9e:	d09d      	beq.n	8000ddc <_printf_i+0x160>
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	68e3      	ldr	r3, [r4, #12]
 8000ea4:	9903      	ldr	r1, [sp, #12]
 8000ea6:	1a5b      	subs	r3, r3, r1
 8000ea8:	42ab      	cmp	r3, r5
 8000eaa:	dcf2      	bgt.n	8000e92 <_printf_i+0x216>
 8000eac:	e7eb      	b.n	8000e86 <_printf_i+0x20a>
 8000eae:	2500      	movs	r5, #0
 8000eb0:	f104 0619 	add.w	r6, r4, #25
 8000eb4:	e7f5      	b.n	8000ea2 <_printf_i+0x226>
 8000eb6:	bf00      	nop
 8000eb8:	0800146f 	.word	0x0800146f
 8000ebc:	08001480 	.word	0x08001480

08000ec0 <__sflush_r>:
 8000ec0:	898a      	ldrh	r2, [r1, #12]
 8000ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec6:	4605      	mov	r5, r0
 8000ec8:	0710      	lsls	r0, r2, #28
 8000eca:	460c      	mov	r4, r1
 8000ecc:	d458      	bmi.n	8000f80 <__sflush_r+0xc0>
 8000ece:	684b      	ldr	r3, [r1, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	dc05      	bgt.n	8000ee0 <__sflush_r+0x20>
 8000ed4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	dc02      	bgt.n	8000ee0 <__sflush_r+0x20>
 8000eda:	2000      	movs	r0, #0
 8000edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	d0f9      	beq.n	8000eda <__sflush_r+0x1a>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000eec:	682f      	ldr	r7, [r5, #0]
 8000eee:	6a21      	ldr	r1, [r4, #32]
 8000ef0:	602b      	str	r3, [r5, #0]
 8000ef2:	d032      	beq.n	8000f5a <__sflush_r+0x9a>
 8000ef4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ef6:	89a3      	ldrh	r3, [r4, #12]
 8000ef8:	075a      	lsls	r2, r3, #29
 8000efa:	d505      	bpl.n	8000f08 <__sflush_r+0x48>
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	1ac0      	subs	r0, r0, r3
 8000f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f02:	b10b      	cbz	r3, 8000f08 <__sflush_r+0x48>
 8000f04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f06:	1ac0      	subs	r0, r0, r3
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f0e:	6a21      	ldr	r1, [r4, #32]
 8000f10:	4628      	mov	r0, r5
 8000f12:	47b0      	blx	r6
 8000f14:	1c43      	adds	r3, r0, #1
 8000f16:	89a3      	ldrh	r3, [r4, #12]
 8000f18:	d106      	bne.n	8000f28 <__sflush_r+0x68>
 8000f1a:	6829      	ldr	r1, [r5, #0]
 8000f1c:	291d      	cmp	r1, #29
 8000f1e:	d82b      	bhi.n	8000f78 <__sflush_r+0xb8>
 8000f20:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <__sflush_r+0x108>)
 8000f22:	410a      	asrs	r2, r1
 8000f24:	07d6      	lsls	r6, r2, #31
 8000f26:	d427      	bmi.n	8000f78 <__sflush_r+0xb8>
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6062      	str	r2, [r4, #4]
 8000f2c:	04d9      	lsls	r1, r3, #19
 8000f2e:	6922      	ldr	r2, [r4, #16]
 8000f30:	6022      	str	r2, [r4, #0]
 8000f32:	d504      	bpl.n	8000f3e <__sflush_r+0x7e>
 8000f34:	1c42      	adds	r2, r0, #1
 8000f36:	d101      	bne.n	8000f3c <__sflush_r+0x7c>
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	b903      	cbnz	r3, 8000f3e <__sflush_r+0x7e>
 8000f3c:	6560      	str	r0, [r4, #84]	; 0x54
 8000f3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f40:	602f      	str	r7, [r5, #0]
 8000f42:	2900      	cmp	r1, #0
 8000f44:	d0c9      	beq.n	8000eda <__sflush_r+0x1a>
 8000f46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f4a:	4299      	cmp	r1, r3
 8000f4c:	d002      	beq.n	8000f54 <__sflush_r+0x94>
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f000 fa22 	bl	8001398 <_free_r>
 8000f54:	2000      	movs	r0, #0
 8000f56:	6360      	str	r0, [r4, #52]	; 0x34
 8000f58:	e7c0      	b.n	8000edc <__sflush_r+0x1c>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	47b0      	blx	r6
 8000f60:	1c41      	adds	r1, r0, #1
 8000f62:	d1c8      	bne.n	8000ef6 <__sflush_r+0x36>
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0c5      	beq.n	8000ef6 <__sflush_r+0x36>
 8000f6a:	2b1d      	cmp	r3, #29
 8000f6c:	d001      	beq.n	8000f72 <__sflush_r+0xb2>
 8000f6e:	2b16      	cmp	r3, #22
 8000f70:	d101      	bne.n	8000f76 <__sflush_r+0xb6>
 8000f72:	602f      	str	r7, [r5, #0]
 8000f74:	e7b1      	b.n	8000eda <__sflush_r+0x1a>
 8000f76:	89a3      	ldrh	r3, [r4, #12]
 8000f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7c:	81a3      	strh	r3, [r4, #12]
 8000f7e:	e7ad      	b.n	8000edc <__sflush_r+0x1c>
 8000f80:	690f      	ldr	r7, [r1, #16]
 8000f82:	2f00      	cmp	r7, #0
 8000f84:	d0a9      	beq.n	8000eda <__sflush_r+0x1a>
 8000f86:	0793      	lsls	r3, r2, #30
 8000f88:	680e      	ldr	r6, [r1, #0]
 8000f8a:	bf08      	it	eq
 8000f8c:	694b      	ldreq	r3, [r1, #20]
 8000f8e:	600f      	str	r7, [r1, #0]
 8000f90:	bf18      	it	ne
 8000f92:	2300      	movne	r3, #0
 8000f94:	eba6 0807 	sub.w	r8, r6, r7
 8000f98:	608b      	str	r3, [r1, #8]
 8000f9a:	f1b8 0f00 	cmp.w	r8, #0
 8000f9e:	dd9c      	ble.n	8000eda <__sflush_r+0x1a>
 8000fa0:	6a21      	ldr	r1, [r4, #32]
 8000fa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	463a      	mov	r2, r7
 8000fa8:	4628      	mov	r0, r5
 8000faa:	47b0      	blx	r6
 8000fac:	2800      	cmp	r0, #0
 8000fae:	dc06      	bgt.n	8000fbe <__sflush_r+0xfe>
 8000fb0:	89a3      	ldrh	r3, [r4, #12]
 8000fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb6:	81a3      	strh	r3, [r4, #12]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fbc:	e78e      	b.n	8000edc <__sflush_r+0x1c>
 8000fbe:	4407      	add	r7, r0
 8000fc0:	eba8 0800 	sub.w	r8, r8, r0
 8000fc4:	e7e9      	b.n	8000f9a <__sflush_r+0xda>
 8000fc6:	bf00      	nop
 8000fc8:	dfbffffe 	.word	0xdfbffffe

08000fcc <_fflush_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	690b      	ldr	r3, [r1, #16]
 8000fd0:	4605      	mov	r5, r0
 8000fd2:	460c      	mov	r4, r1
 8000fd4:	b913      	cbnz	r3, 8000fdc <_fflush_r+0x10>
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	4628      	mov	r0, r5
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	b118      	cbz	r0, 8000fe6 <_fflush_r+0x1a>
 8000fde:	6a03      	ldr	r3, [r0, #32]
 8000fe0:	b90b      	cbnz	r3, 8000fe6 <_fflush_r+0x1a>
 8000fe2:	f7ff fb7d 	bl	80006e0 <__sinit>
 8000fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f3      	beq.n	8000fd6 <_fflush_r+0xa>
 8000fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ff0:	07d0      	lsls	r0, r2, #31
 8000ff2:	d404      	bmi.n	8000ffe <_fflush_r+0x32>
 8000ff4:	0599      	lsls	r1, r3, #22
 8000ff6:	d402      	bmi.n	8000ffe <_fflush_r+0x32>
 8000ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ffa:	f7ff fbeb 	bl	80007d4 <__retarget_lock_acquire_recursive>
 8000ffe:	4628      	mov	r0, r5
 8001000:	4621      	mov	r1, r4
 8001002:	f7ff ff5d 	bl	8000ec0 <__sflush_r>
 8001006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001008:	07da      	lsls	r2, r3, #31
 800100a:	4605      	mov	r5, r0
 800100c:	d4e4      	bmi.n	8000fd8 <_fflush_r+0xc>
 800100e:	89a3      	ldrh	r3, [r4, #12]
 8001010:	059b      	lsls	r3, r3, #22
 8001012:	d4e1      	bmi.n	8000fd8 <_fflush_r+0xc>
 8001014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001016:	f7ff fbde 	bl	80007d6 <__retarget_lock_release_recursive>
 800101a:	e7dd      	b.n	8000fd8 <_fflush_r+0xc>

0800101c <__malloc_lock>:
 800101c:	4801      	ldr	r0, [pc, #4]	; (8001024 <__malloc_lock+0x8>)
 800101e:	f7ff bbd9 	b.w	80007d4 <__retarget_lock_acquire_recursive>
 8001022:	bf00      	nop
 8001024:	200001b8 	.word	0x200001b8

08001028 <__malloc_unlock>:
 8001028:	4801      	ldr	r0, [pc, #4]	; (8001030 <__malloc_unlock+0x8>)
 800102a:	f7ff bbd4 	b.w	80007d6 <__retarget_lock_release_recursive>
 800102e:	bf00      	nop
 8001030:	200001b8 	.word	0x200001b8

08001034 <__sread>:
 8001034:	b510      	push	{r4, lr}
 8001036:	460c      	mov	r4, r1
 8001038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800103c:	f000 f978 	bl	8001330 <_read_r>
 8001040:	2800      	cmp	r0, #0
 8001042:	bfab      	itete	ge
 8001044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001046:	89a3      	ldrhlt	r3, [r4, #12]
 8001048:	181b      	addge	r3, r3, r0
 800104a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800104e:	bfac      	ite	ge
 8001050:	6563      	strge	r3, [r4, #84]	; 0x54
 8001052:	81a3      	strhlt	r3, [r4, #12]
 8001054:	bd10      	pop	{r4, pc}

08001056 <__swrite>:
 8001056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105a:	461f      	mov	r7, r3
 800105c:	898b      	ldrh	r3, [r1, #12]
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	4605      	mov	r5, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4616      	mov	r6, r2
 8001066:	d505      	bpl.n	8001074 <__swrite+0x1e>
 8001068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800106c:	2302      	movs	r3, #2
 800106e:	2200      	movs	r2, #0
 8001070:	f000 f94c 	bl	800130c <_lseek_r>
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800107a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800107e:	81a3      	strh	r3, [r4, #12]
 8001080:	4632      	mov	r2, r6
 8001082:	463b      	mov	r3, r7
 8001084:	4628      	mov	r0, r5
 8001086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800108a:	f000 b973 	b.w	8001374 <_write_r>

0800108e <__sseek>:
 800108e:	b510      	push	{r4, lr}
 8001090:	460c      	mov	r4, r1
 8001092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001096:	f000 f939 	bl	800130c <_lseek_r>
 800109a:	1c43      	adds	r3, r0, #1
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	bf15      	itete	ne
 80010a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80010a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010aa:	81a3      	strheq	r3, [r4, #12]
 80010ac:	bf18      	it	ne
 80010ae:	81a3      	strhne	r3, [r4, #12]
 80010b0:	bd10      	pop	{r4, pc}

080010b2 <__sclose>:
 80010b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b6:	f000 b8f7 	b.w	80012a8 <_close_r>

080010ba <__swbuf_r>:
 80010ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010bc:	460e      	mov	r6, r1
 80010be:	4614      	mov	r4, r2
 80010c0:	4605      	mov	r5, r0
 80010c2:	b118      	cbz	r0, 80010cc <__swbuf_r+0x12>
 80010c4:	6a03      	ldr	r3, [r0, #32]
 80010c6:	b90b      	cbnz	r3, 80010cc <__swbuf_r+0x12>
 80010c8:	f7ff fb0a 	bl	80006e0 <__sinit>
 80010cc:	69a3      	ldr	r3, [r4, #24]
 80010ce:	60a3      	str	r3, [r4, #8]
 80010d0:	89a3      	ldrh	r3, [r4, #12]
 80010d2:	071a      	lsls	r2, r3, #28
 80010d4:	d525      	bpl.n	8001122 <__swbuf_r+0x68>
 80010d6:	6923      	ldr	r3, [r4, #16]
 80010d8:	b31b      	cbz	r3, 8001122 <__swbuf_r+0x68>
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	6922      	ldr	r2, [r4, #16]
 80010de:	1a98      	subs	r0, r3, r2
 80010e0:	6963      	ldr	r3, [r4, #20]
 80010e2:	b2f6      	uxtb	r6, r6
 80010e4:	4283      	cmp	r3, r0
 80010e6:	4637      	mov	r7, r6
 80010e8:	dc04      	bgt.n	80010f4 <__swbuf_r+0x3a>
 80010ea:	4621      	mov	r1, r4
 80010ec:	4628      	mov	r0, r5
 80010ee:	f7ff ff6d 	bl	8000fcc <_fflush_r>
 80010f2:	b9e0      	cbnz	r0, 800112e <__swbuf_r+0x74>
 80010f4:	68a3      	ldr	r3, [r4, #8]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	60a3      	str	r3, [r4, #8]
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	6022      	str	r2, [r4, #0]
 8001100:	701e      	strb	r6, [r3, #0]
 8001102:	6962      	ldr	r2, [r4, #20]
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	429a      	cmp	r2, r3
 8001108:	d004      	beq.n	8001114 <__swbuf_r+0x5a>
 800110a:	89a3      	ldrh	r3, [r4, #12]
 800110c:	07db      	lsls	r3, r3, #31
 800110e:	d506      	bpl.n	800111e <__swbuf_r+0x64>
 8001110:	2e0a      	cmp	r6, #10
 8001112:	d104      	bne.n	800111e <__swbuf_r+0x64>
 8001114:	4621      	mov	r1, r4
 8001116:	4628      	mov	r0, r5
 8001118:	f7ff ff58 	bl	8000fcc <_fflush_r>
 800111c:	b938      	cbnz	r0, 800112e <__swbuf_r+0x74>
 800111e:	4638      	mov	r0, r7
 8001120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001122:	4621      	mov	r1, r4
 8001124:	4628      	mov	r0, r5
 8001126:	f000 f805 	bl	8001134 <__swsetup_r>
 800112a:	2800      	cmp	r0, #0
 800112c:	d0d5      	beq.n	80010da <__swbuf_r+0x20>
 800112e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001132:	e7f4      	b.n	800111e <__swbuf_r+0x64>

08001134 <__swsetup_r>:
 8001134:	b538      	push	{r3, r4, r5, lr}
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <__swsetup_r+0xac>)
 8001138:	4605      	mov	r5, r0
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	460c      	mov	r4, r1
 800113e:	b118      	cbz	r0, 8001148 <__swsetup_r+0x14>
 8001140:	6a03      	ldr	r3, [r0, #32]
 8001142:	b90b      	cbnz	r3, 8001148 <__swsetup_r+0x14>
 8001144:	f7ff facc 	bl	80006e0 <__sinit>
 8001148:	89a3      	ldrh	r3, [r4, #12]
 800114a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800114e:	0718      	lsls	r0, r3, #28
 8001150:	d422      	bmi.n	8001198 <__swsetup_r+0x64>
 8001152:	06d9      	lsls	r1, r3, #27
 8001154:	d407      	bmi.n	8001166 <__swsetup_r+0x32>
 8001156:	2309      	movs	r3, #9
 8001158:	602b      	str	r3, [r5, #0]
 800115a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800115e:	81a3      	strh	r3, [r4, #12]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001164:	e034      	b.n	80011d0 <__swsetup_r+0x9c>
 8001166:	0758      	lsls	r0, r3, #29
 8001168:	d512      	bpl.n	8001190 <__swsetup_r+0x5c>
 800116a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800116c:	b141      	cbz	r1, 8001180 <__swsetup_r+0x4c>
 800116e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001172:	4299      	cmp	r1, r3
 8001174:	d002      	beq.n	800117c <__swsetup_r+0x48>
 8001176:	4628      	mov	r0, r5
 8001178:	f000 f90e 	bl	8001398 <_free_r>
 800117c:	2300      	movs	r3, #0
 800117e:	6363      	str	r3, [r4, #52]	; 0x34
 8001180:	89a3      	ldrh	r3, [r4, #12]
 8001182:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001186:	81a3      	strh	r3, [r4, #12]
 8001188:	2300      	movs	r3, #0
 800118a:	6063      	str	r3, [r4, #4]
 800118c:	6923      	ldr	r3, [r4, #16]
 800118e:	6023      	str	r3, [r4, #0]
 8001190:	89a3      	ldrh	r3, [r4, #12]
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	81a3      	strh	r3, [r4, #12]
 8001198:	6923      	ldr	r3, [r4, #16]
 800119a:	b94b      	cbnz	r3, 80011b0 <__swsetup_r+0x7c>
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80011a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a6:	d003      	beq.n	80011b0 <__swsetup_r+0x7c>
 80011a8:	4621      	mov	r1, r4
 80011aa:	4628      	mov	r0, r5
 80011ac:	f000 f840 	bl	8001230 <__smakebuf_r>
 80011b0:	89a0      	ldrh	r0, [r4, #12]
 80011b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011b6:	f010 0301 	ands.w	r3, r0, #1
 80011ba:	d00a      	beq.n	80011d2 <__swsetup_r+0x9e>
 80011bc:	2300      	movs	r3, #0
 80011be:	60a3      	str	r3, [r4, #8]
 80011c0:	6963      	ldr	r3, [r4, #20]
 80011c2:	425b      	negs	r3, r3
 80011c4:	61a3      	str	r3, [r4, #24]
 80011c6:	6923      	ldr	r3, [r4, #16]
 80011c8:	b943      	cbnz	r3, 80011dc <__swsetup_r+0xa8>
 80011ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80011ce:	d1c4      	bne.n	800115a <__swsetup_r+0x26>
 80011d0:	bd38      	pop	{r3, r4, r5, pc}
 80011d2:	0781      	lsls	r1, r0, #30
 80011d4:	bf58      	it	pl
 80011d6:	6963      	ldrpl	r3, [r4, #20]
 80011d8:	60a3      	str	r3, [r4, #8]
 80011da:	e7f4      	b.n	80011c6 <__swsetup_r+0x92>
 80011dc:	2000      	movs	r0, #0
 80011de:	e7f7      	b.n	80011d0 <__swsetup_r+0x9c>
 80011e0:	20000058 	.word	0x20000058

080011e4 <__swhatbuf_r>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	460c      	mov	r4, r1
 80011e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ec:	2900      	cmp	r1, #0
 80011ee:	b096      	sub	sp, #88	; 0x58
 80011f0:	4615      	mov	r5, r2
 80011f2:	461e      	mov	r6, r3
 80011f4:	da0d      	bge.n	8001212 <__swhatbuf_r+0x2e>
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011fc:	f04f 0100 	mov.w	r1, #0
 8001200:	bf0c      	ite	eq
 8001202:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001206:	2340      	movne	r3, #64	; 0x40
 8001208:	2000      	movs	r0, #0
 800120a:	6031      	str	r1, [r6, #0]
 800120c:	602b      	str	r3, [r5, #0]
 800120e:	b016      	add	sp, #88	; 0x58
 8001210:	bd70      	pop	{r4, r5, r6, pc}
 8001212:	466a      	mov	r2, sp
 8001214:	f000 f858 	bl	80012c8 <_fstat_r>
 8001218:	2800      	cmp	r0, #0
 800121a:	dbec      	blt.n	80011f6 <__swhatbuf_r+0x12>
 800121c:	9901      	ldr	r1, [sp, #4]
 800121e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001222:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001226:	4259      	negs	r1, r3
 8001228:	4159      	adcs	r1, r3
 800122a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122e:	e7eb      	b.n	8001208 <__swhatbuf_r+0x24>

08001230 <__smakebuf_r>:
 8001230:	898b      	ldrh	r3, [r1, #12]
 8001232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001234:	079d      	lsls	r5, r3, #30
 8001236:	4606      	mov	r6, r0
 8001238:	460c      	mov	r4, r1
 800123a:	d507      	bpl.n	800124c <__smakebuf_r+0x1c>
 800123c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001240:	6023      	str	r3, [r4, #0]
 8001242:	6123      	str	r3, [r4, #16]
 8001244:	2301      	movs	r3, #1
 8001246:	6163      	str	r3, [r4, #20]
 8001248:	b002      	add	sp, #8
 800124a:	bd70      	pop	{r4, r5, r6, pc}
 800124c:	ab01      	add	r3, sp, #4
 800124e:	466a      	mov	r2, sp
 8001250:	f7ff ffc8 	bl	80011e4 <__swhatbuf_r>
 8001254:	9900      	ldr	r1, [sp, #0]
 8001256:	4605      	mov	r5, r0
 8001258:	4630      	mov	r0, r6
 800125a:	f7ff fc21 	bl	8000aa0 <_malloc_r>
 800125e:	b948      	cbnz	r0, 8001274 <__smakebuf_r+0x44>
 8001260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001264:	059a      	lsls	r2, r3, #22
 8001266:	d4ef      	bmi.n	8001248 <__smakebuf_r+0x18>
 8001268:	f023 0303 	bic.w	r3, r3, #3
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	81a3      	strh	r3, [r4, #12]
 8001272:	e7e3      	b.n	800123c <__smakebuf_r+0xc>
 8001274:	89a3      	ldrh	r3, [r4, #12]
 8001276:	6020      	str	r0, [r4, #0]
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	81a3      	strh	r3, [r4, #12]
 800127e:	9b00      	ldr	r3, [sp, #0]
 8001280:	6163      	str	r3, [r4, #20]
 8001282:	9b01      	ldr	r3, [sp, #4]
 8001284:	6120      	str	r0, [r4, #16]
 8001286:	b15b      	cbz	r3, 80012a0 <__smakebuf_r+0x70>
 8001288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800128c:	4630      	mov	r0, r6
 800128e:	f000 f82d 	bl	80012ec <_isatty_r>
 8001292:	b128      	cbz	r0, 80012a0 <__smakebuf_r+0x70>
 8001294:	89a3      	ldrh	r3, [r4, #12]
 8001296:	f023 0303 	bic.w	r3, r3, #3
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	81a3      	strh	r3, [r4, #12]
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	431d      	orrs	r5, r3
 80012a4:	81a5      	strh	r5, [r4, #12]
 80012a6:	e7cf      	b.n	8001248 <__smakebuf_r+0x18>

080012a8 <_close_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	4d06      	ldr	r5, [pc, #24]	; (80012c4 <_close_r+0x1c>)
 80012ac:	2300      	movs	r3, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	602b      	str	r3, [r5, #0]
 80012b4:	f7ff f847 	bl	8000346 <_close>
 80012b8:	1c43      	adds	r3, r0, #1
 80012ba:	d102      	bne.n	80012c2 <_close_r+0x1a>
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	b103      	cbz	r3, 80012c2 <_close_r+0x1a>
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
 80012c4:	200001c4 	.word	0x200001c4

080012c8 <_fstat_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4d07      	ldr	r5, [pc, #28]	; (80012e8 <_fstat_r+0x20>)
 80012cc:	2300      	movs	r3, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	602b      	str	r3, [r5, #0]
 80012d6:	f7ff f842 	bl	800035e <_fstat>
 80012da:	1c43      	adds	r3, r0, #1
 80012dc:	d102      	bne.n	80012e4 <_fstat_r+0x1c>
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	b103      	cbz	r3, 80012e4 <_fstat_r+0x1c>
 80012e2:	6023      	str	r3, [r4, #0]
 80012e4:	bd38      	pop	{r3, r4, r5, pc}
 80012e6:	bf00      	nop
 80012e8:	200001c4 	.word	0x200001c4

080012ec <_isatty_r>:
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	4d06      	ldr	r5, [pc, #24]	; (8001308 <_isatty_r+0x1c>)
 80012f0:	2300      	movs	r3, #0
 80012f2:	4604      	mov	r4, r0
 80012f4:	4608      	mov	r0, r1
 80012f6:	602b      	str	r3, [r5, #0]
 80012f8:	f7ff f841 	bl	800037e <_isatty>
 80012fc:	1c43      	adds	r3, r0, #1
 80012fe:	d102      	bne.n	8001306 <_isatty_r+0x1a>
 8001300:	682b      	ldr	r3, [r5, #0]
 8001302:	b103      	cbz	r3, 8001306 <_isatty_r+0x1a>
 8001304:	6023      	str	r3, [r4, #0]
 8001306:	bd38      	pop	{r3, r4, r5, pc}
 8001308:	200001c4 	.word	0x200001c4

0800130c <_lseek_r>:
 800130c:	b538      	push	{r3, r4, r5, lr}
 800130e:	4d07      	ldr	r5, [pc, #28]	; (800132c <_lseek_r+0x20>)
 8001310:	4604      	mov	r4, r0
 8001312:	4608      	mov	r0, r1
 8001314:	4611      	mov	r1, r2
 8001316:	2200      	movs	r2, #0
 8001318:	602a      	str	r2, [r5, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	f7ff f83a 	bl	8000394 <_lseek>
 8001320:	1c43      	adds	r3, r0, #1
 8001322:	d102      	bne.n	800132a <_lseek_r+0x1e>
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	b103      	cbz	r3, 800132a <_lseek_r+0x1e>
 8001328:	6023      	str	r3, [r4, #0]
 800132a:	bd38      	pop	{r3, r4, r5, pc}
 800132c:	200001c4 	.word	0x200001c4

08001330 <_read_r>:
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	4d07      	ldr	r5, [pc, #28]	; (8001350 <_read_r+0x20>)
 8001334:	4604      	mov	r4, r0
 8001336:	4608      	mov	r0, r1
 8001338:	4611      	mov	r1, r2
 800133a:	2200      	movs	r2, #0
 800133c:	602a      	str	r2, [r5, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	f7fe ffc8 	bl	80002d4 <_read>
 8001344:	1c43      	adds	r3, r0, #1
 8001346:	d102      	bne.n	800134e <_read_r+0x1e>
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	b103      	cbz	r3, 800134e <_read_r+0x1e>
 800134c:	6023      	str	r3, [r4, #0]
 800134e:	bd38      	pop	{r3, r4, r5, pc}
 8001350:	200001c4 	.word	0x200001c4

08001354 <_sbrk_r>:
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	4d06      	ldr	r5, [pc, #24]	; (8001370 <_sbrk_r+0x1c>)
 8001358:	2300      	movs	r3, #0
 800135a:	4604      	mov	r4, r0
 800135c:	4608      	mov	r0, r1
 800135e:	602b      	str	r3, [r5, #0]
 8001360:	f7ff f826 	bl	80003b0 <_sbrk>
 8001364:	1c43      	adds	r3, r0, #1
 8001366:	d102      	bne.n	800136e <_sbrk_r+0x1a>
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	b103      	cbz	r3, 800136e <_sbrk_r+0x1a>
 800136c:	6023      	str	r3, [r4, #0]
 800136e:	bd38      	pop	{r3, r4, r5, pc}
 8001370:	200001c4 	.word	0x200001c4

08001374 <_write_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4d07      	ldr	r5, [pc, #28]	; (8001394 <_write_r+0x20>)
 8001378:	4604      	mov	r4, r0
 800137a:	4608      	mov	r0, r1
 800137c:	4611      	mov	r1, r2
 800137e:	2200      	movs	r2, #0
 8001380:	602a      	str	r2, [r5, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	f7fe ffc3 	bl	800030e <_write>
 8001388:	1c43      	adds	r3, r0, #1
 800138a:	d102      	bne.n	8001392 <_write_r+0x1e>
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	b103      	cbz	r3, 8001392 <_write_r+0x1e>
 8001390:	6023      	str	r3, [r4, #0]
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	200001c4 	.word	0x200001c4

08001398 <_free_r>:
 8001398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800139a:	2900      	cmp	r1, #0
 800139c:	d044      	beq.n	8001428 <_free_r+0x90>
 800139e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013a2:	9001      	str	r0, [sp, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f1a1 0404 	sub.w	r4, r1, #4
 80013aa:	bfb8      	it	lt
 80013ac:	18e4      	addlt	r4, r4, r3
 80013ae:	f7ff fe35 	bl	800101c <__malloc_lock>
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <_free_r+0x94>)
 80013b4:	9801      	ldr	r0, [sp, #4]
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	b933      	cbnz	r3, 80013c8 <_free_r+0x30>
 80013ba:	6063      	str	r3, [r4, #4]
 80013bc:	6014      	str	r4, [r2, #0]
 80013be:	b003      	add	sp, #12
 80013c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013c4:	f7ff be30 	b.w	8001028 <__malloc_unlock>
 80013c8:	42a3      	cmp	r3, r4
 80013ca:	d908      	bls.n	80013de <_free_r+0x46>
 80013cc:	6825      	ldr	r5, [r4, #0]
 80013ce:	1961      	adds	r1, r4, r5
 80013d0:	428b      	cmp	r3, r1
 80013d2:	bf01      	itttt	eq
 80013d4:	6819      	ldreq	r1, [r3, #0]
 80013d6:	685b      	ldreq	r3, [r3, #4]
 80013d8:	1949      	addeq	r1, r1, r5
 80013da:	6021      	streq	r1, [r4, #0]
 80013dc:	e7ed      	b.n	80013ba <_free_r+0x22>
 80013de:	461a      	mov	r2, r3
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	b10b      	cbz	r3, 80013e8 <_free_r+0x50>
 80013e4:	42a3      	cmp	r3, r4
 80013e6:	d9fa      	bls.n	80013de <_free_r+0x46>
 80013e8:	6811      	ldr	r1, [r2, #0]
 80013ea:	1855      	adds	r5, r2, r1
 80013ec:	42a5      	cmp	r5, r4
 80013ee:	d10b      	bne.n	8001408 <_free_r+0x70>
 80013f0:	6824      	ldr	r4, [r4, #0]
 80013f2:	4421      	add	r1, r4
 80013f4:	1854      	adds	r4, r2, r1
 80013f6:	42a3      	cmp	r3, r4
 80013f8:	6011      	str	r1, [r2, #0]
 80013fa:	d1e0      	bne.n	80013be <_free_r+0x26>
 80013fc:	681c      	ldr	r4, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	6053      	str	r3, [r2, #4]
 8001402:	440c      	add	r4, r1
 8001404:	6014      	str	r4, [r2, #0]
 8001406:	e7da      	b.n	80013be <_free_r+0x26>
 8001408:	d902      	bls.n	8001410 <_free_r+0x78>
 800140a:	230c      	movs	r3, #12
 800140c:	6003      	str	r3, [r0, #0]
 800140e:	e7d6      	b.n	80013be <_free_r+0x26>
 8001410:	6825      	ldr	r5, [r4, #0]
 8001412:	1961      	adds	r1, r4, r5
 8001414:	428b      	cmp	r3, r1
 8001416:	bf04      	itt	eq
 8001418:	6819      	ldreq	r1, [r3, #0]
 800141a:	685b      	ldreq	r3, [r3, #4]
 800141c:	6063      	str	r3, [r4, #4]
 800141e:	bf04      	itt	eq
 8001420:	1949      	addeq	r1, r1, r5
 8001422:	6021      	streq	r1, [r4, #0]
 8001424:	6054      	str	r4, [r2, #4]
 8001426:	e7ca      	b.n	80013be <_free_r+0x26>
 8001428:	b003      	add	sp, #12
 800142a:	bd30      	pop	{r4, r5, pc}
 800142c:	200001bc 	.word	0x200001bc

08001430 <_init>:
 8001430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001432:	bf00      	nop
 8001434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001436:	bc08      	pop	{r3}
 8001438:	469e      	mov	lr, r3
 800143a:	4770      	bx	lr

0800143c <_fini>:
 800143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143e:	bf00      	nop
 8001440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001442:	bc08      	pop	{r3}
 8001444:	469e      	mov	lr, r3
 8001446:	4770      	bx	lr
